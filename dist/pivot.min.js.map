{"version":3,"sources":["pivot.coffee","pivot.min.js"],"names":["callWithJQuery","indexOf","item","i","l","this","length","slice","bind","fn","me","apply","arguments","hasProp","hasOwnProperty","pivotModule","exports","module","require","define","amd","jQuery","$","PivotData","addSeparators","aggregatorTemplates","aggregators","dayNamesEn","derivers","getSort","locales","mthNamesEn","naturalSort","numberFormat","pivotTableRenderer","renderers","sortAs","usFmt","usFmtInt","usFmtPct","zeroPad","nStr","thousandsSep","decimalSep","rgx","x","x1","x2","split","test","replace","opts","defaults","digitsAfterDecimal","scaler","prefix","suffix","showZero","extend","result","isNaN","isFinite","toFixed","count","formatter","data","rowKey","colKey","push","value","format","countUnique","arg","attr","uniq","record","ref","call","numInputs","listUnique","sep","join","sum","parseFloat","min","val","Math","max","first","sorter","sorters","last","average","len","sumOverSum","denom","num","sumNum","sumDenom","sumOverSumBound80","upper","sign","sqrt","fractionOf","wrapped","type","selector","total","row","col","inner","getAggregator","tpl","Count","Count Unique Values","List Unique Values","Sum","Integer Sum","Average","Minimum","Maximum","First","Last","Sum over Sum","80% Upper Bound","80% Lower Bound","Sum as Fraction of Total","Sum as Fraction of Rows","Sum as Fraction of Columns","Count as Fraction of Total","Count as Fraction of Rows","Count as Fraction of Columns","Table","Table Barchart","barchart","Heatmap","heatmap","Row Heatmap","Col Heatmap","en","localeStrings","renderError","computeError","uiRenderError","selectAll","selectNone","tooMany","filterResults","cancel","totals","vs","by","number","substr","bin","binWidth","dateFormat","formatString","utcOutput","mthNames","dayNames","utc","date","Date","parse","m","p","_this","as","bs","a","a1","b","b1","rd","rx","rz","String","match","shift","order","l_mapping","mapping","toLowerCase","sort","isFunction","input","ref1","ref2","ref3","ref4","ref5","ref6","ref7","getRowKeys","getColKeys","sortKeys","arrSort","aggregator","aggregatorName","colAttrs","cols","rowAttrs","rows","valAttrs","vals","derivedAttributes","filter","tree","rowKeys","colKeys","rowTotals","colTotals","allTotal","sorted","forEachRecord","processRecord","f","addRecord","compactRecord","j","k","len1","results","results1","tblCols","isEmptyObject","v","isArray","each","text","Error","prototype","forEachMatchingRecord","criteria","callback","attrs","sortersArr","comparison","flatColKey","flatRowKey","len2","n","fromCharCode","agg","pivotUtilities","pivotData","c","getClickHandler","r","spanSize","tbody","td","th","thead","totalAggregator","tr","txt","table","clickCallback","rowValues","colValues","filters","e","document","createElement","className","arr","noDraw","stop","parseInt","setAttribute","appendChild","textContent","innerHTML","onclick","pivot","inputOpts","locale","localeDefaults","dataClass","renderer","rendererOptions","error","console","stack","html","hasChildNodes","removeChild","lastChild","append","pivotUI","overwrite","attrLength","attrValues","config","existingOpts","initialRender","len3","materializedInput","o","pivotTable","recordsProcessed","refresh","refreshDelayed","rendererControl","shownAttributes","uiTable","unused","unusedAttrsVerticalAutoCutoff","unusedAttrsVerticalAutoOverride","hiddenAttributes","menuLimit","exclusions","inclusions","unusedAttrsVertical","autoSortUnusedAttrs","onRefresh","base","class","addClass","appendTo","attrElem","checkContainer","closeFilterBox","controls","filterItem","filterItemExcluded","finalButtons","hasExcludedItem","placeholder","triangleLink","valueCount","valueList","values","hide","accept","accept_gen","trim","accepted","real_filter","substring","startsWith","find","parent","show","prop","toggleClass","removeClass","left","top","currentTarget","position","css","inArray","rendererName","len4","newDropdown","numInputsToProcess","pivotUIOptions","pvtVals","q","s","subopts","unusedAttrsContainer","remove","not","excludedItems","inclusionsInfo","children","setTimeout","sortable","update","ui","sender","connectWith","items","scope","colorScaleGenerator","heatmapper","numCols","numRows","nonRed","round","colorScale","forEachCell","elem","barcharter","wrapper","height","bottom","right","background-color","padding-left","padding-right","padding","padding-top","text-align"],"mappings":"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","file":"pivot.min.js","sourcesContent":["callWithJQuery = (pivotModule) ->\r\n    if typeof exports is \"object\" and typeof module is \"object\" # CommonJS\r\n        pivotModule require(\"jquery\")\r\n    else if typeof define is \"function\" and define.amd # AMD\r\n        define [\"jquery\"], pivotModule\r\n    # Plain browser env\r\n    else\r\n        pivotModule jQuery\r\n\r\ncallWithJQuery ($) ->\r\n\r\n    ###\r\n    Utilities\r\n    ###\r\n\r\n    addSeparators = (nStr, thousandsSep, decimalSep) ->\r\n        nStr += ''\r\n        x = nStr.split('.')\r\n        x1 = x[0]\r\n        x2 = if x.length > 1 then  decimalSep + x[1] else ''\r\n        rgx = /(\\d+)(\\d{3})/\r\n        x1 = x1.replace(rgx, '$1' + thousandsSep + '$2') while rgx.test(x1)\r\n        return x1 + x2\r\n\r\n    numberFormat = (opts) ->\r\n        defaults =\r\n            digitsAfterDecimal: 2, scaler: 1,\r\n            thousandsSep: \",\", decimalSep: \".\"\r\n            prefix: \"\", suffix: \"\"\r\n            showZero: false\r\n        opts = $.extend({}, defaults, opts)\r\n        (x) ->\r\n            return \"\" if isNaN(x) or not isFinite(x)\r\n            return \"\" if x == 0 and not opts.showZero\r\n            result = addSeparators (opts.scaler*x).toFixed(opts.digitsAfterDecimal), opts.thousandsSep, opts.decimalSep\r\n            return \"\"+opts.prefix+result+opts.suffix\r\n\r\n    #aggregator templates default to US number formatting but this is overrideable\r\n    usFmt = numberFormat()\r\n    usFmtInt = numberFormat(digitsAfterDecimal: 0)\r\n    usFmtPct = numberFormat(digitsAfterDecimal:1, scaler: 100, suffix: \"%\")\r\n\r\n    aggregatorTemplates =\r\n        count: (formatter=usFmtInt) -> () -> (data, rowKey, colKey) ->\r\n            count: 0\r\n            push:  -> @count++\r\n            value: -> @count\r\n            format: formatter\r\n\r\n        countUnique: (formatter=usFmtInt) -> ([attr]) -> (data, rowKey, colKey) ->\r\n            uniq: []\r\n            push: (record) -> @uniq.push(record[attr]) if record[attr] not in @uniq\r\n            value: -> @uniq.length\r\n            format: formatter\r\n            numInputs: if attr? then 0 else 1\r\n\r\n        listUnique: (sep) -> ([attr]) -> (data, rowKey, colKey)  ->\r\n            uniq: []\r\n            push: (record) -> @uniq.push(record[attr]) if record[attr] not in @uniq\r\n            value: -> @uniq.join sep\r\n            format: (x) -> x\r\n            numInputs: if attr? then 0 else 1\r\n\r\n        sum: (formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\r\n            sum: 0\r\n            push: (record) -> @sum += parseFloat(record[attr]) if not isNaN parseFloat(record[attr])\r\n            value: -> @sum\r\n            format: formatter\r\n            numInputs: if attr? then 0 else 1\r\n\r\n        min: (formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\r\n            val: null\r\n            push: (record) ->\r\n                x = parseFloat(record[attr])\r\n                if not isNaN x then @val = Math.min(x, @val ? x)\r\n            value: -> @val\r\n            format: formatter\r\n            numInputs: if attr? then 0 else 1\r\n\r\n        max: (formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\r\n            val: null\r\n            push: (record) ->\r\n                x = parseFloat(record[attr])\r\n                if not isNaN x then @val = Math.max(x, @val ? x)\r\n            value: -> @val\r\n            format: formatter\r\n            numInputs: if attr? then 0 else 1\r\n\r\n        first: (formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\r\n            val: null\r\n            sorter: getSort(data?.sorters, attr)\r\n            push: (record) ->\r\n                x = record[attr]\r\n                @val = x if @sorter(x, @val ? x) <= 0\r\n            value: -> @val\r\n            format: (x) -> if isNaN(x) then x else formatter(x)\r\n            numInputs: if attr? then 0 else 1\r\n\r\n        last: (formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\r\n            val: null\r\n            sorter: getSort(data?.sorters, attr)\r\n            push: (record) ->\r\n                x = record[attr]\r\n                @val = x if @sorter(x, @val ? x) >= 0\r\n            value: -> @val\r\n            format: (x) -> if isNaN(x) then x else formatter(x)\r\n            numInputs: if attr? then 0 else 1\r\n\r\n        average:  (formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\r\n            sum: 0\r\n            len: 0\r\n            push: (record) ->\r\n                if not isNaN parseFloat(record[attr])\r\n                    @sum += parseFloat(record[attr])\r\n                    @len++\r\n            value: -> @sum/@len\r\n            format: formatter\r\n            numInputs: if attr? then 0 else 1\r\n\r\n        sumOverSum: (formatter=usFmt) -> ([num, denom]) -> (data, rowKey, colKey) ->\r\n            sumNum: 0\r\n            sumDenom: 0\r\n            push: (record) ->\r\n                @sumNum   += parseFloat(record[num])   if not isNaN parseFloat(record[num])\r\n                @sumDenom += parseFloat(record[denom]) if not isNaN parseFloat(record[denom])\r\n            value: -> @sumNum/@sumDenom\r\n            format: formatter\r\n            numInputs: if num? and denom? then 0 else 2\r\n\r\n        sumOverSumBound80: (upper=true, formatter=usFmt) -> ([num, denom]) -> (data, rowKey, colKey) ->\r\n            sumNum: 0\r\n            sumDenom: 0\r\n            push: (record) ->\r\n                @sumNum   += parseFloat(record[num])   if not isNaN parseFloat(record[num])\r\n                @sumDenom += parseFloat(record[denom]) if not isNaN parseFloat(record[denom])\r\n            value: ->\r\n                sign = if upper then 1 else -1\r\n                (0.821187207574908/@sumDenom + @sumNum/@sumDenom + 1.2815515655446004*sign*\r\n                    Math.sqrt(0.410593603787454/ (@sumDenom*@sumDenom) + (@sumNum*(1 - @sumNum/ @sumDenom))/ (@sumDenom*@sumDenom)))/\r\n                    (1 + 1.642374415149816/@sumDenom)\r\n            format: formatter\r\n            numInputs: if num? and denom? then 0 else 2\r\n\r\n        fractionOf: (wrapped, type=\"total\", formatter=usFmtPct) -> (x...) -> (data, rowKey, colKey) ->\r\n            selector: {total:[[],[]],row:[rowKey,[]],col:[[],colKey]}[type]\r\n            inner: wrapped(x...)(data, rowKey, colKey)\r\n            push: (record) -> @inner.push record\r\n            format: formatter\r\n            value: -> @inner.value() / data.getAggregator(@selector...).inner.value()\r\n            numInputs: wrapped(x...)().numInputs\r\n\r\n    #default aggregators & renderers use US naming and number formatting\r\n    aggregators = do (tpl = aggregatorTemplates) ->\r\n        \"Count\":                tpl.count(usFmtInt)\r\n        \"Count Unique Values\":  tpl.countUnique(usFmtInt)\r\n        \"List Unique Values\":   tpl.listUnique(\", \")\r\n        \"Sum\":                  tpl.sum(usFmt)\r\n        \"Integer Sum\":          tpl.sum(usFmtInt)\r\n        \"Average\":              tpl.average(usFmt)\r\n        \"Minimum\":              tpl.min(usFmt)\r\n        \"Maximum\":              tpl.max(usFmt)\r\n        \"First\":                tpl.first(usFmt)\r\n        \"Last\":                 tpl.last(usFmt)\r\n        \"Sum over Sum\":         tpl.sumOverSum(usFmt)\r\n        \"80% Upper Bound\":      tpl.sumOverSumBound80(true, usFmt)\r\n        \"80% Lower Bound\":      tpl.sumOverSumBound80(false, usFmt)\r\n        \"Sum as Fraction of Total\":     tpl.fractionOf(tpl.sum(),   \"total\", usFmtPct)\r\n        \"Sum as Fraction of Rows\":      tpl.fractionOf(tpl.sum(),   \"row\",   usFmtPct)\r\n        \"Sum as Fraction of Columns\":   tpl.fractionOf(tpl.sum(),   \"col\",   usFmtPct)\r\n        \"Count as Fraction of Total\":   tpl.fractionOf(tpl.count(), \"total\", usFmtPct)\r\n        \"Count as Fraction of Rows\":    tpl.fractionOf(tpl.count(), \"row\",   usFmtPct)\r\n        \"Count as Fraction of Columns\": tpl.fractionOf(tpl.count(), \"col\",   usFmtPct)\r\n\r\n    renderers =\r\n        \"Table\":          (data, opts) ->   pivotTableRenderer(data, opts)\r\n        \"Table Barchart\": (data, opts) -> $(pivotTableRenderer(data, opts)).barchart()\r\n        \"Heatmap\":        (data, opts) -> $(pivotTableRenderer(data, opts)).heatmap(\"heatmap\",    opts)\r\n        \"Row Heatmap\":    (data, opts) -> $(pivotTableRenderer(data, opts)).heatmap(\"rowheatmap\", opts)\r\n        \"Col Heatmap\":    (data, opts) -> $(pivotTableRenderer(data, opts)).heatmap(\"colheatmap\", opts)\r\n\r\n    locales =\r\n        en:\r\n            aggregators: aggregators\r\n            renderers: renderers\r\n            localeStrings:\r\n                renderError: \"An error occurred rendering the PivotTable results.\"\r\n                computeError: \"An error occurred computing the PivotTable results.\"\r\n                uiRenderError: \"An error occurred rendering the PivotTable UI.\"\r\n                selectAll: \"Select All\"\r\n                selectNone: \"Select None\"\r\n                tooMany: \"(too many to list)\"\r\n                filterResults: \"Filter values\"\r\n                apply: \"Apply\"\r\n                cancel: \"Cancel\"\r\n                totals: \"Totals\" #for table renderer\r\n                vs: \"vs\" #for gchart renderer\r\n                by: \"by\" #for gchart renderer\r\n\r\n    #dateFormat deriver l10n requires month and day names to be passed in directly\r\n    mthNamesEn = [\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"]\r\n    dayNamesEn = [\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"]\r\n    zeroPad = (number) -> (\"0\"+number).substr(-2,2)\r\n\r\n    derivers =\r\n        bin: (col, binWidth) -> (record) -> record[col] - record[col] % binWidth\r\n        dateFormat: (col, formatString, utcOutput=false, mthNames=mthNamesEn, dayNames=dayNamesEn) ->\r\n            utc = if utcOutput then \"UTC\" else \"\"\r\n            (record) -> #thanks http://stackoverflow.com/a/12213072/112871\r\n                date = new Date(Date.parse(record[col]))\r\n                if isNaN(date) then return \"\"\r\n                formatString.replace /%(.)/g, (m, p) ->\r\n                    switch p\r\n                        when \"y\" then date[\"get#{utc}FullYear\"]()\r\n                        when \"m\" then zeroPad(date[\"get#{utc}Month\"]()+1)\r\n                        when \"n\" then mthNames[date[\"get#{utc}Month\"]()]\r\n                        when \"d\" then zeroPad(date[\"get#{utc}Date\"]())\r\n                        when \"w\" then dayNames[date[\"get#{utc}Day\"]()]\r\n                        when \"x\" then date[\"get#{utc}Day\"]()\r\n                        when \"H\" then zeroPad(date[\"get#{utc}Hours\"]())\r\n                        when \"M\" then zeroPad(date[\"get#{utc}Minutes\"]())\r\n                        when \"S\" then zeroPad(date[\"get#{utc}Seconds\"]())\r\n                        else \"%\" + p\r\n\r\n    naturalSort = (as, bs) => #thanks http://stackoverflow.com/a/4373421/112871\r\n        rx = /(\\d+)|(\\D+)/g\r\n        rd = /\\d/\r\n        rz = /^0/\r\n        if typeof as is \"number\" or typeof bs is \"number\"\r\n            return 1  if isNaN(as)\r\n            return -1  if isNaN(bs)\r\n            return as - bs\r\n        a = String(as)\r\n        b = String(bs)\r\n        return 0  if a is b\r\n        return (if a > b then 1 else -1)  unless rd.test(a) and rd.test(b)\r\n        a = a.match(rx)\r\n        b = b.match(rx)\r\n        while a.length and b.length\r\n            a1 = a.shift()\r\n            b1 = b.shift()\r\n            if a1 != b1\r\n                if rd.test(a1) and rd.test(b1)\r\n                    return a1.replace(rz, \".0\") - b1.replace(rz, \".0\")\r\n                else\r\n                    return (if a1 > b1 then 1 else -1)\r\n        a.length - b.length\r\n\r\n    sortAs = (order) ->\r\n        mapping = {}\r\n        l_mapping = {} # sort lowercased keys similarly\r\n        for i, x of order\r\n            mapping[x] = i\r\n            l_mapping[x.toLowerCase()] = i if typeof x == \"string\"\r\n        (a, b) ->\r\n            if mapping[a]? and mapping[b]? then mapping[a] - mapping[b]\r\n            else if mapping[a]? then -1\r\n            else if mapping[b]? then 1\r\n            else if l_mapping[a]? and l_mapping[b]? then l_mapping[a] - l_mapping[b]\r\n            else if l_mapping[a]? then -1\r\n            else if l_mapping[b]? then 1\r\n            else naturalSort(a,b)\r\n\r\n    getSort = (sorters, attr) ->\r\n        if sorters?\r\n            if $.isFunction(sorters)\r\n                sort = sorters(attr)\r\n                return sort if $.isFunction(sort)\r\n            else if sorters[attr]?\r\n                return sorters[attr]\r\n        return naturalSort\r\n\r\n    ###\r\n    Data Model class\r\n    ###\r\n\r\n    class PivotData\r\n        constructor: (input, opts = {}) ->\r\n            @input = input\r\n            @aggregator = opts.aggregator ? aggregatorTemplates.count()()\r\n            @aggregatorName = opts.aggregatorName ? \"Count\"\r\n            @colAttrs = opts.cols ? []\r\n            @rowAttrs = opts.rows ? []\r\n            @valAttrs = opts.vals ? []\r\n            @sorters = opts.sorters ? {}\r\n            @derivedAttributes = opts.derivedAttributes ? {}\r\n            @filter = opts.filter ? (-> true)\r\n            @tree = {}\r\n            @rowKeys = []\r\n            @colKeys = []\r\n            @rowTotals = {}\r\n            @colTotals = {}\r\n            @allTotal = @aggregator(this, [], [])\r\n            @sorted = false\r\n\r\n            # iterate through input, accumulating data for cells\r\n            PivotData.forEachRecord @input, @derivedAttributes, (record) =>\r\n                @processRecord(record) if @filter(record)\r\n\r\n        #can handle arrays or jQuery selections of tables\r\n        @forEachRecord = (input, derivedAttributes, f) ->\r\n            if $.isEmptyObject derivedAttributes\r\n                addRecord = f\r\n            else\r\n                addRecord = (record) ->\r\n                    record[k] = v(record) ? record[k] for k, v of derivedAttributes\r\n                    f(record)\r\n\r\n            #if it's a function, have it call us back\r\n            if $.isFunction(input)\r\n                input(addRecord)\r\n            else if $.isArray(input)\r\n                if $.isArray(input[0]) #array of arrays\r\n                    for own i, compactRecord of input when i > 0\r\n                        record = {}\r\n                        record[k] = compactRecord[j] for own j, k of input[0]\r\n                        addRecord(record)\r\n                else #array of objects\r\n                    addRecord(record) for record in input\r\n            else if input instanceof jQuery\r\n                tblCols = []\r\n                $(\"thead > tr > th\", input).each (i) -> tblCols.push $(this).text()\r\n                $(\"tbody > tr\", input).each (i) ->\r\n                    record = {}\r\n                    $(\"td\", this).each (j) -> record[tblCols[j]] = $(this).text()\r\n                    addRecord(record)\r\n            else\r\n                throw new Error(\"unknown input format\")\r\n\r\n        forEachMatchingRecord: (criteria, callback) ->\r\n            PivotData.forEachRecord @input, @derivedAttributes, (record) =>\r\n                return if not @filter(record)\r\n                for k, v of criteria\r\n                    return if v != (record[k] ? \"null\")\r\n                callback(record)\r\n\r\n        arrSort: (attrs) =>\r\n            sortersArr = (getSort(@sorters, a) for a in attrs)\r\n            (a,b) ->\r\n                for own i, sorter of sortersArr\r\n                    comparison = sorter(a[i], b[i])\r\n                    return comparison if comparison != 0\r\n                return 0\r\n\r\n        sortKeys: () =>\r\n            if not @sorted\r\n                @sorted = true\r\n                @rowKeys.sort @arrSort(@rowAttrs)\r\n                @colKeys.sort @arrSort(@colAttrs)\r\n\r\n        getColKeys: () =>\r\n            @sortKeys()\r\n            return @colKeys\r\n\r\n        getRowKeys: () =>\r\n            @sortKeys()\r\n            return @rowKeys\r\n\r\n        processRecord: (record) -> #this code is called in a tight loop\r\n            colKey = []\r\n            rowKey = []\r\n            colKey.push record[x] ? \"null\" for x in @colAttrs\r\n            rowKey.push record[x] ? \"null\" for x in @rowAttrs\r\n            flatRowKey = rowKey.join(String.fromCharCode(0))\r\n            flatColKey = colKey.join(String.fromCharCode(0))\r\n\r\n            @allTotal.push record\r\n\r\n            if rowKey.length != 0\r\n                if not @rowTotals[flatRowKey]\r\n                    @rowKeys.push rowKey\r\n                    @rowTotals[flatRowKey] = @aggregator(this, rowKey, [])\r\n                @rowTotals[flatRowKey].push record\r\n\r\n            if colKey.length != 0\r\n                if not @colTotals[flatColKey]\r\n                    @colKeys.push colKey\r\n                    @colTotals[flatColKey] = @aggregator(this, [], colKey)\r\n                @colTotals[flatColKey].push record\r\n\r\n            if colKey.length != 0 and rowKey.length != 0\r\n                if not @tree[flatRowKey]\r\n                    @tree[flatRowKey] = {}\r\n                if not @tree[flatRowKey][flatColKey]\r\n                    @tree[flatRowKey][flatColKey] = @aggregator(this, rowKey, colKey)\r\n                @tree[flatRowKey][flatColKey].push record\r\n\r\n        getAggregator: (rowKey, colKey) =>\r\n            flatRowKey = rowKey.join(String.fromCharCode(0))\r\n            flatColKey = colKey.join(String.fromCharCode(0))\r\n            if rowKey.length == 0 and colKey.length == 0\r\n                agg = @allTotal\r\n            else if rowKey.length == 0\r\n                agg = @colTotals[flatColKey]\r\n            else if colKey.length == 0\r\n                agg = @rowTotals[flatRowKey]\r\n            else\r\n                agg = @tree[flatRowKey][flatColKey]\r\n            return agg ? {value: (-> null), format: -> \"\"}\r\n\r\n    #expose these to the outside world\r\n    $.pivotUtilities = {aggregatorTemplates, aggregators, renderers, derivers, locales,\r\n        naturalSort, numberFormat, sortAs, PivotData}\r\n\r\n    ###\r\n    Default Renderer for hierarchical table layout\r\n    ###\r\n\r\n    pivotTableRenderer = (pivotData, opts) ->\r\n\r\n        defaults =\r\n            table: clickCallback: null\r\n            localeStrings: totals: \"Totals\"\r\n\r\n        opts = $.extend(true, {}, defaults, opts)\r\n\r\n        colAttrs = pivotData.colAttrs\r\n        rowAttrs = pivotData.rowAttrs\r\n        rowKeys = pivotData.getRowKeys()\r\n        colKeys = pivotData.getColKeys()\r\n\r\n        if opts.table.clickCallback\r\n            getClickHandler = (value, rowValues, colValues) ->\r\n                filters = {}\r\n                filters[attr] = colValues[i] for own i, attr of colAttrs when colValues[i]?\r\n                filters[attr] = rowValues[i] for own i, attr of rowAttrs when rowValues[i]?\r\n                return (e) -> opts.table.clickCallback(e, value, filters, pivotData)\r\n\r\n        #now actually build the output\r\n        result = document.createElement(\"table\")\r\n        result.className = \"pvtTable\"\r\n\r\n        #helper function for setting row/col-span in pivotTableRenderer\r\n        spanSize = (arr, i, j) ->\r\n            if i != 0\r\n                noDraw = true\r\n                for x in [0..j]\r\n                    if arr[i-1][x] != arr[i][x]\r\n                        noDraw = false\r\n                if noDraw\r\n                  return -1 #do not draw cell\r\n            len = 0\r\n            while i+len < arr.length\r\n                stop = false\r\n                for x in [0..j]\r\n                    stop = true if arr[i][x] != arr[i+len][x]\r\n                break if stop\r\n                len++\r\n            return len\r\n\r\n        #the first few rows are for col headers\r\n        thead = document.createElement(\"thead\")\r\n        for own j, c of colAttrs\r\n            tr = document.createElement(\"tr\")\r\n            if parseInt(j) == 0 and rowAttrs.length != 0\r\n                th = document.createElement(\"th\")\r\n                th.setAttribute(\"colspan\", rowAttrs.length)\r\n                th.setAttribute(\"rowspan\", colAttrs.length)\r\n                tr.appendChild th\r\n            th = document.createElement(\"th\")\r\n            th.className = \"pvtAxisLabel\"\r\n            th.textContent = c\r\n            tr.appendChild th\r\n            for own i, colKey of colKeys\r\n                x = spanSize(colKeys, parseInt(i), parseInt(j))\r\n                if x != -1\r\n                    th = document.createElement(\"th\")\r\n                    th.className = \"pvtColLabel\"\r\n                    th.textContent = colKey[j]\r\n                    th.setAttribute(\"colspan\", x)\r\n                    if parseInt(j) == colAttrs.length-1 and rowAttrs.length != 0\r\n                        th.setAttribute(\"rowspan\", 2)\r\n                    tr.appendChild th\r\n            if parseInt(j) == 0\r\n                th = document.createElement(\"th\")\r\n                th.className = \"pvtTotalLabel\"\r\n                th.innerHTML = opts.localeStrings.totals\r\n                th.setAttribute(\"rowspan\", colAttrs.length + (if rowAttrs.length ==0 then 0 else 1))\r\n                tr.appendChild th\r\n            thead.appendChild tr\r\n\r\n        #then a row for row header headers\r\n        if rowAttrs.length !=0\r\n            tr = document.createElement(\"tr\")\r\n            for own i, r of rowAttrs\r\n                th = document.createElement(\"th\")\r\n                th.className = \"pvtAxisLabel\"\r\n                th.textContent = r\r\n                tr.appendChild th\r\n            th = document.createElement(\"th\")\r\n            if colAttrs.length ==0\r\n                th.className = \"pvtTotalLabel\"\r\n                th.innerHTML = opts.localeStrings.totals\r\n            tr.appendChild th\r\n            thead.appendChild tr\r\n        result.appendChild thead\r\n\r\n        #now the actual data rows, with their row headers and totals\r\n        tbody = document.createElement(\"tbody\")\r\n        for own i, rowKey of rowKeys\r\n            tr = document.createElement(\"tr\")\r\n            for own j, txt of rowKey\r\n                x = spanSize(rowKeys, parseInt(i), parseInt(j))\r\n                if x != -1\r\n                    th = document.createElement(\"th\")\r\n                    th.className = \"pvtRowLabel\"\r\n                    th.textContent = txt\r\n                    th.setAttribute(\"rowspan\", x)\r\n                    if parseInt(j) == rowAttrs.length-1 and colAttrs.length !=0\r\n                        th.setAttribute(\"colspan\",2)\r\n                    tr.appendChild th\r\n            for own j, colKey of colKeys #this is the tight loop\r\n                aggregator = pivotData.getAggregator(rowKey, colKey)\r\n                val = aggregator.value()\r\n                td = document.createElement(\"td\")\r\n                td.className = \"pvtVal row#{i} col#{j}\"\r\n                td.textContent = aggregator.format(val)\r\n                td.setAttribute(\"data-value\", val)\r\n                if getClickHandler?\r\n                    td.onclick = getClickHandler(val, rowKey, colKey)\r\n                tr.appendChild td\r\n\r\n            totalAggregator = pivotData.getAggregator(rowKey, [])\r\n            val = totalAggregator.value()\r\n            td = document.createElement(\"td\")\r\n            td.className = \"pvtTotal rowTotal\"\r\n            td.textContent = totalAggregator.format(val)\r\n            td.setAttribute(\"data-value\", val)\r\n            if getClickHandler?\r\n                td.onclick = getClickHandler(val, rowKey, [])\r\n            td.setAttribute(\"data-for\", \"row\"+i)\r\n            tr.appendChild td\r\n            tbody.appendChild tr\r\n\r\n        #finally, the row for col totals, and a grand total\r\n        tr = document.createElement(\"tr\")\r\n        th = document.createElement(\"th\")\r\n        th.className = \"pvtTotalLabel\"\r\n        th.innerHTML = opts.localeStrings.totals\r\n        th.setAttribute(\"colspan\", rowAttrs.length + (if colAttrs.length == 0 then 0 else 1))\r\n        tr.appendChild th\r\n        for own j, colKey of colKeys\r\n            totalAggregator = pivotData.getAggregator([], colKey)\r\n            val = totalAggregator.value()\r\n            td = document.createElement(\"td\")\r\n            td.className = \"pvtTotal colTotal\"\r\n            td.textContent = totalAggregator.format(val)\r\n            td.setAttribute(\"data-value\", val)\r\n            if getClickHandler?\r\n                td.onclick = getClickHandler(val, [], colKey)\r\n            td.setAttribute(\"data-for\", \"col\"+j)\r\n            tr.appendChild td\r\n        totalAggregator = pivotData.getAggregator([], [])\r\n        val = totalAggregator.value()\r\n        td = document.createElement(\"td\")\r\n        td.className = \"pvtGrandTotal\"\r\n        td.textContent = totalAggregator.format(val)\r\n        td.setAttribute(\"data-value\", val)\r\n        if getClickHandler?\r\n            td.onclick = getClickHandler(val, [], [])\r\n        tr.appendChild td\r\n        tbody.appendChild tr\r\n        result.appendChild tbody\r\n\r\n        #squirrel this away for later\r\n        result.setAttribute(\"data-numrows\", rowKeys.length)\r\n        result.setAttribute(\"data-numcols\", colKeys.length)\r\n\r\n        return result\r\n\r\n    ###\r\n    Pivot Table core: create PivotData object and call Renderer on it\r\n    ###\r\n\r\n    $.fn.pivot = (input, inputOpts, locale=\"en\") ->\r\n        locale = \"en\" if not locales[locale]?\r\n        defaults =\r\n            cols : [], rows: [], vals: []\r\n            dataClass: PivotData\r\n            filter: -> true\r\n            aggregator: aggregatorTemplates.count()()\r\n            aggregatorName: \"Count\"\r\n            sorters: {}\r\n            derivedAttributes: {}\r\n            renderer: pivotTableRenderer\r\n\r\n        localeStrings = $.extend(true, {}, locales.en.localeStrings, locales[locale].localeStrings)\r\n        localeDefaults =\r\n            rendererOptions: {localeStrings}\r\n            localeStrings: localeStrings\r\n\r\n        opts = $.extend(true, {}, localeDefaults, $.extend({}, defaults, inputOpts))\r\n\r\n        result = null\r\n        try\r\n            pivotData = new opts.dataClass(input, opts)\r\n            try\r\n                result = opts.renderer(pivotData, opts.rendererOptions)\r\n            catch e\r\n                console.error(e.stack) if console?\r\n                result = $(\"<span>\").html opts.localeStrings.renderError\r\n        catch e\r\n            console.error(e.stack) if console?\r\n            result = $(\"<span>\").html opts.localeStrings.computeError\r\n\r\n        x = this[0]\r\n        x.removeChild(x.lastChild) while x.hasChildNodes()\r\n        return @append result\r\n\r\n\r\n    ###\r\n    Pivot Table UI: calls Pivot Table core above with options set by user\r\n    ###\r\n\r\n    $.fn.pivotUI = (input, inputOpts, overwrite = false, locale=\"en\") ->\r\n        locale = \"en\" if not locales[locale]?\r\n        defaults =\r\n            derivedAttributes: {}\r\n            aggregators: locales[locale].aggregators\r\n            renderers: locales[locale].renderers\r\n            hiddenAttributes: []\r\n            menuLimit: 500\r\n            cols: [], rows: [], vals: []\r\n            dataClass: PivotData\r\n            exclusions: {}\r\n            inclusions: {}\r\n            unusedAttrsVertical: 85\r\n            autoSortUnusedAttrs: false\r\n            onRefresh: null\r\n            filter: -> true\r\n            sorters: {}\r\n\r\n        localeStrings = $.extend(true, {}, locales.en.localeStrings, locales[locale].localeStrings)\r\n        localeDefaults =\r\n            rendererOptions: {localeStrings}\r\n            localeStrings: localeStrings\r\n\r\n        existingOpts = @data \"pivotUIOptions\"\r\n        if not existingOpts? or overwrite\r\n            opts = $.extend(true, {}, localeDefaults, $.extend({}, defaults, inputOpts))\r\n        else\r\n            opts = existingOpts\r\n\r\n        try\r\n            # do a first pass on the data to cache a materialized copy of any\r\n            # function-valued inputs and to compute dimension cardinalities\r\n            attrValues = {}\r\n            materializedInput = []\r\n            recordsProcessed = 0\r\n            PivotData.forEachRecord input, opts.derivedAttributes, (record) ->\r\n                return unless opts.filter(record)\r\n                materializedInput.push(record)\r\n                for own attr of record\r\n                    if not attrValues[attr]?\r\n                        attrValues[attr] = {}\r\n                        if recordsProcessed > 0\r\n                            attrValues[attr][\"null\"] = recordsProcessed\r\n                for attr of attrValues\r\n                    value = record[attr] ? \"null\"\r\n                    attrValues[attr][value] ?= 0\r\n                    attrValues[attr][value]++\r\n                recordsProcessed++\r\n\r\n            #start building the output\r\n            uiTable = $(\"<div>\", \"class\": \"pvtUi\").attr(\"cellpadding\", 5)\r\n\r\n            #renderer control\r\n            rendererControl = $(\"<div>\").addClass('pvtRendererContainer')\r\n\r\n            renderer = $(\"<select>\")\r\n                .addClass('pvtRenderer')\r\n                .addClass('form-control')\r\n                .appendTo(rendererControl)\r\n                .bind \"change\", -> refresh() #capture reference\r\n            for own x of opts.renderers\r\n                $(\"<option>\").val(x).html(x).appendTo(renderer)\r\n\r\n\r\n            #axis list, including the double-click menu\r\n            unused = $(\"<div>\").addClass('pvtAxisContainer pvtUnused')\r\n            shownAttributes = (a for a of attrValues when a not in opts.hiddenAttributes)\r\n\r\n            unusedAttrsVerticalAutoOverride = false\r\n            if opts.unusedAttrsVertical == \"auto\"\r\n                unusedAttrsVerticalAutoCutoff = 120 # legacy support\r\n            else\r\n                unusedAttrsVerticalAutoCutoff = parseInt opts.unusedAttrsVertical\r\n\r\n            if not isNaN(unusedAttrsVerticalAutoCutoff)\r\n                attrLength = 0\r\n                attrLength += a.length for a in shownAttributes\r\n                unusedAttrsVerticalAutoOverride = attrLength > unusedAttrsVerticalAutoCutoff\r\n\r\n            unused.addClass('pvtVertList')\r\n\r\n            for own i, attr of shownAttributes\r\n                do (attr) ->\r\n                    values = (v for v of attrValues[attr])\r\n                    hasExcludedItem = false\r\n                    valueList = $(\"<div>\").addClass('pvtFilterBox').hide()\r\n\r\n                    valueList.append $(\"<h4>\").append(\r\n                        $(\"<span>\").text(attr),\r\n                        $(\"<span>\").addClass(\"count\").text(\"(#{values.length})\"),\r\n                        )\r\n                    if values.length > opts.menuLimit\r\n                        valueList.append $(\"<p>\").html(opts.localeStrings.tooMany)\r\n                    else\r\n                        if values.length > 5\r\n                            controls = $(\"<p>\").appendTo(valueList)\r\n                            sorter = getSort(opts.sorters, attr)\r\n                            placeholder = opts.localeStrings.filterResults\r\n                            $(\"<input>\", {type: \"text\"}).appendTo(controls)\r\n                                .attr({placeholder: placeholder, class: \"pvtSearch\"})\r\n                                .bind \"keyup\", ->\r\n                                    filter = $(this).val().toLowerCase().trim()\r\n                                    accept_gen = (prefix, accepted) -> (v) ->\r\n                                        real_filter = filter.substring(prefix.length).trim()\r\n                                        return true if real_filter.length == 0\r\n                                        return Math.sign(sorter(v.toLowerCase(), real_filter)) in accepted\r\n                                    accept =\r\n                                        if      filter.startsWith(\">=\") then accept_gen(\">=\", [1,0])\r\n                                        else if filter.startsWith(\"<=\") then accept_gen(\"<=\", [-1,0])\r\n                                        else if filter.startsWith(\">\")  then accept_gen(\">\",  [1])\r\n                                        else if filter.startsWith(\"<\")  then accept_gen(\"<\",  [-1])\r\n                                        else if filter.startsWith(\"~\")  then (v) ->\r\n                                                return true if filter.substring(1).trim().length == 0\r\n                                                v.toLowerCase().match(filter.substring(1))\r\n                                        else (v) -> v.toLowerCase().indexOf(filter) != -1\r\n\r\n                                    valueList.find('.pvtCheckContainer p label span.value').each ->\r\n                                        if accept($(this).text())\r\n                                            $(this).parent().parent().show()\r\n                                        else\r\n                                            $(this).parent().parent().hide()\r\n                            controls.append $(\"<br>\")\r\n                            $(\"<button>\", {type:\"button\"}).addClass('btn').addClass('btn-default').appendTo(controls)\r\n                                .html(opts.localeStrings.selectAll)\r\n                                .bind \"click\", ->\r\n                                    valueList.find(\"input:visible:not(:checked)\")\r\n                                        .prop(\"checked\", true).toggleClass(\"changed\")\r\n                                    return false\r\n                            $(\"<button>\", {type:\"button\"}).addClass('btn').addClass('btn-default').appendTo(controls)\r\n                                .html(opts.localeStrings.selectNone)\r\n                                .bind \"click\", ->\r\n                                    valueList.find(\"input:visible:checked\")\r\n                                        .prop(\"checked\", false).toggleClass(\"changed\")\r\n                                    return false\r\n\r\n                        checkContainer = $(\"<div>\").addClass(\"pvtCheckContainer\").appendTo(valueList)\r\n\r\n                        for value in values.sort(getSort(opts.sorters, attr))\r\n                             valueCount = attrValues[attr][value]\r\n                             filterItem = $(\"<label>\")\r\n                             filterItemExcluded = false\r\n                             if opts.inclusions[attr]\r\n                                filterItemExcluded = (value not in opts.inclusions[attr])\r\n                             else if opts.exclusions[attr]\r\n                                filterItemExcluded = (value in opts.exclusions[attr])\r\n                             hasExcludedItem ||= filterItemExcluded\r\n                             $(\"<input>\")\r\n                                .attr(\"type\", \"checkbox\").addClass('pvtFilter')\r\n                                .attr(\"checked\", !filterItemExcluded).data(\"filter\", [attr,value])\r\n                                .appendTo(filterItem)\r\n                                .bind \"change\", -> $(this).toggleClass(\"changed\")\r\n                             filterItem.append $(\"<span>\").addClass(\"value\").text(value)\r\n                             filterItem.append $(\"<span>\").addClass(\"count\").text(\"(\"+valueCount+\")\")\r\n                             checkContainer.append $(\"<p>\").append(filterItem)\r\n\r\n                    closeFilterBox = ->\r\n                        if valueList.find(\"[type='checkbox']\").length >\r\n                               valueList.find(\"[type='checkbox']:checked\").length\r\n                                attrElem.addClass \"pvtFilteredAttribute\"\r\n                            else\r\n                                attrElem.removeClass \"pvtFilteredAttribute\"\r\n\r\n                            valueList.find('.pvtSearch').val('')\r\n                            valueList.find('.pvtCheckContainer p').show()\r\n                            valueList.hide()\r\n\r\n                    finalButtons = $(\"<p>\").appendTo(valueList)\r\n\r\n                    if values.length <= opts.menuLimit\r\n                        $(\"<button>\", {type: \"button\"}).addClass('btn').addClass('btn-info').text(opts.localeStrings.apply)\r\n                            .appendTo(finalButtons).bind \"click\", ->\r\n                                if valueList.find(\".changed\").removeClass(\"changed\").length\r\n                                    refresh()\r\n                                closeFilterBox()\r\n\r\n                    $(\"<button>\", {type: \"button\"}).addClass('btn').addClass('btn-default').text(opts.localeStrings.cancel)\r\n                        .appendTo(finalButtons).bind \"click\", ->\r\n                            valueList.find(\".changed:checked\")\r\n                                .removeClass(\"changed\").prop(\"checked\", false)\r\n                            valueList.find(\".changed:not(:checked)\")\r\n                                .removeClass(\"changed\").prop(\"checked\", true)\r\n                            closeFilterBox()\r\n\r\n                    triangleLink = $(\"<span>\").addClass('pvtTriangle')\r\n                        .html(\" &#x25BE;\").bind \"click\", (e) ->\r\n                            {left, top} = $(e.currentTarget).position()\r\n                            valueList.css(left: left+10, top: top+10).show()\r\n\r\n                    attrElem = $(\"<li>\").addClass(\"axis_#{i}\")\r\n                        .append $(\"<span>\").addClass('pvtAttr').text(attr).data(\"attrName\", attr).append(triangleLink)\r\n\r\n                    attrElem.addClass('pvtFilteredAttribute') if hasExcludedItem\r\n                    unused.append(attrElem).append(valueList)\r\n\r\n            #config\r\n            config = $(\"<div>\")\r\n              .addClass(\"pvtConfigContainer\")\r\n              .appendTo(uiTable)\r\n\r\n            #renderer dropdown\r\n            config.append(rendererControl)\r\n\r\n            #unused attribs\r\n            $(\"<h2>Drag fields to configure the report:</h2>\")\r\n              .appendTo(config)\r\n            config.append(unused)\r\n\r\n            #row axes\r\n            $(\"<h2>Rows</h2>\")\r\n              .appendTo(config)\r\n            $(\"<div>\").addClass('pvtAxisContainer pvtRows')\r\n              .appendTo(config)\r\n\r\n            #column axes\r\n            $(\"<h2>Columns</h2>\")\r\n              .appendTo(config)\r\n            cols = $(\"<div>\").addClass('pvtAxisContainer pvtCols')\r\n              .appendTo(config)\r\n\r\n            #aggregator menu and value area\r\n\r\n            aggregator = $(\"<select>\").addClass('pvtAggregator').addClass('form-control')\r\n                .bind \"change\", -> refresh() #capture reference\r\n            for own x of opts.aggregators\r\n                aggregator.append $(\"<option>\").val(x).html(x)\r\n\r\n            $(\"<h2>Values</h2>\")\r\n              .appendTo(config)\r\n            $(\"<div>\").addClass('pvtVals')\r\n              .appendTo(config)\r\n              .append(aggregator)\r\n\r\n            #the actual pivot table container\r\n            pivotTable = $(\"<div>\")\r\n                .addClass('pvtRendererArea')\r\n                .appendTo(uiTable)\r\n\r\n            #render the UI in its default state\r\n            @html uiTable\r\n\r\n            #set up the UI initial state as requested by moving elements around\r\n\r\n            for x in opts.cols\r\n                @find(\".pvtCols\").append @find(\".axis_#{$.inArray(x, shownAttributes)}\")\r\n            for x in opts.rows\r\n                @find(\".pvtRows\").append @find(\".axis_#{$.inArray(x, shownAttributes)}\")\r\n            if opts.aggregatorName?\r\n                @find(\".pvtAggregator\").val opts.aggregatorName\r\n            if opts.rendererName?\r\n                @find(\".pvtRenderer\").val opts.rendererName\r\n\r\n            initialRender = true\r\n\r\n            #set up for refreshing\r\n            refreshDelayed = =>\r\n                subopts =\r\n                    derivedAttributes: opts.derivedAttributes\r\n                    localeStrings: opts.localeStrings\r\n                    rendererOptions: opts.rendererOptions\r\n                    sorters: opts.sorters\r\n                    cols: [], rows: []\r\n                    dataClass: opts.dataClass\r\n\r\n                numInputsToProcess = opts.aggregators[aggregator.val()]([])().numInputs ? 0\r\n                vals = []\r\n                @find(\".pvtRows li span.pvtAttr\").each -> subopts.rows.push $(this).data(\"attrName\")\r\n                @find(\".pvtCols li span.pvtAttr\").each -> subopts.cols.push $(this).data(\"attrName\")\r\n                @find(\".pvtVals select.pvtAttrDropdown\").each ->\r\n                    if numInputsToProcess == 0\r\n                        $(this).remove()\r\n                    else\r\n                        numInputsToProcess--\r\n                        vals.push $(this).val() if $(this).val() != \"\"\r\n\r\n                if numInputsToProcess != 0\r\n                    pvtVals = @find(\".pvtVals\")\r\n                    for x in [0...numInputsToProcess]\r\n                        newDropdown = $(\"<select>\")\r\n                            .addClass('pvtAttrDropdown')\r\n                            .addClass('form-control')\r\n                            .append($(\"<option>\"))\r\n                            .bind \"change\", -> refresh()\r\n                        for attr in shownAttributes\r\n                            newDropdown.append($(\"<option>\").val(attr).text(attr))\r\n                        pvtVals.append(newDropdown)\r\n\r\n                if initialRender\r\n                    vals = opts.vals\r\n                    i = 0\r\n                    @find(\".pvtVals select.pvtAttrDropdown\").each ->\r\n                        $(this).val vals[i]\r\n                        i++\r\n                    initialRender = false\r\n\r\n                subopts.aggregatorName = aggregator.val()\r\n                subopts.vals = vals\r\n                subopts.aggregator = opts.aggregators[aggregator.val()](vals)\r\n                subopts.renderer = opts.renderers[renderer.val()]\r\n\r\n                #construct filter here\r\n                exclusions = {}\r\n                @find('input.pvtFilter').not(':checked').each ->\r\n                    filter = $(this).data(\"filter\")\r\n                    if exclusions[filter[0]]?\r\n                        exclusions[filter[0]].push( filter[1] )\r\n                    else\r\n                        exclusions[filter[0]] = [ filter[1] ]\r\n                #include inclusions when exclusions present\r\n                inclusions = {}\r\n                @find('input.pvtFilter:checked').each ->\r\n                    filter = $(this).data(\"filter\")\r\n                    if exclusions[filter[0]]?\r\n                        if inclusions[filter[0]]?\r\n                            inclusions[filter[0]].push( filter[1] )\r\n                        else\r\n                            inclusions[filter[0]] = [ filter[1] ]\r\n\r\n                subopts.filter = (record) ->\r\n                    return false if not opts.filter(record)\r\n                    for k,excludedItems of exclusions\r\n                        return false if \"\"+(record[k] ? 'null') in excludedItems\r\n                    return true\r\n\r\n                pivotTable.pivot(materializedInput,subopts)\r\n                pivotUIOptions = $.extend {}, opts,\r\n                    cols: subopts.cols\r\n                    rows: subopts.rows\r\n                    vals: vals\r\n                    exclusions: exclusions\r\n                    inclusions: inclusions\r\n                    inclusionsInfo: inclusions #duplicated for backwards-compatibility\r\n                    aggregatorName: aggregator.val()\r\n                    rendererName: renderer.val()\r\n\r\n                @data \"pivotUIOptions\", pivotUIOptions\r\n\r\n                # if requested make sure unused columns are in alphabetical order\r\n                if opts.autoSortUnusedAttrs\r\n                    unusedAttrsContainer = @find(\"div.pvtUnused.pvtAxisContainer\")\r\n                    $(unusedAttrsContainer).children(\"li\")\r\n                        .sort((a, b) => naturalSort($(a).text(), $(b).text()))\r\n                        .appendTo unusedAttrsContainer\r\n\r\n                pivotTable.css(\"opacity\", 1)\r\n                opts.onRefresh(pivotUIOptions) if opts.onRefresh?\r\n\r\n            refresh = =>\r\n                pivotTable.css(\"opacity\", 0.5)\r\n                setTimeout refreshDelayed, 10\r\n\r\n            #the very first refresh will actually display the table\r\n            refresh()\r\n\r\n            @find(\".pvtAxisContainer\").sortable\r\n                    update: (e, ui) -> refresh() if not ui.sender?\r\n                    connectWith: @find(\".pvtAxisContainer\")\r\n                    items: 'li'\r\n                    placeholder: 'pvtPlaceholder'\r\n        catch e\r\n            console.error(e.stack) if console?\r\n            @html opts.localeStrings.uiRenderError\r\n        return this\r\n\r\n    ###\r\n    Heatmap post-processing\r\n    ###\r\n\r\n    $.fn.heatmap = (scope = \"heatmap\", opts) ->\r\n        numRows = @data \"numrows\"\r\n        numCols = @data \"numcols\"\r\n\r\n        # given a series of values\r\n        # must return a function to map a given value to a CSS color\r\n        colorScaleGenerator = opts?.heatmap?.colorScaleGenerator\r\n        colorScaleGenerator ?= (values) ->\r\n            min = Math.min(values...)\r\n            max = Math.max(values...)\r\n            return (x) ->\r\n                nonRed = 255 - Math.round 255*(x-min)/(max-min)\r\n                return \"rgb(255,#{nonRed},#{nonRed})\"\r\n\r\n        heatmapper = (scope) =>\r\n            forEachCell = (f) =>\r\n                @find(scope).each ->\r\n                    x = $(this).data(\"value\")\r\n                    f(x, $(this)) if x? and isFinite(x)\r\n\r\n            values = []\r\n            forEachCell (x) -> values.push x\r\n            colorScale = colorScaleGenerator(values)\r\n            forEachCell (x, elem) -> elem.css \"background-color\", colorScale(x)\r\n\r\n        switch scope\r\n            when \"heatmap\"    then heatmapper \".pvtVal\"\r\n            when \"rowheatmap\" then heatmapper \".pvtVal.row#{i}\" for i in [0...numRows]\r\n            when \"colheatmap\" then heatmapper \".pvtVal.col#{j}\" for j in [0...numCols]\r\n\r\n        heatmapper \".pvtTotal.rowTotal\"\r\n        heatmapper \".pvtTotal.colTotal\"\r\n\r\n        return this\r\n\r\n    ###\r\n    Barchart post-processing\r\n    ###\r\n\r\n    $.fn.barchart =  ->\r\n        numRows = @data \"numrows\"\r\n        numCols = @data \"numcols\"\r\n\r\n        barcharter = (scope) =>\r\n            forEachCell = (f) =>\r\n                @find(scope).each ->\r\n                    x = $(this).data(\"value\")\r\n                    f(x, $(this)) if x? and isFinite(x)\r\n\r\n            values = []\r\n            forEachCell (x) -> values.push x\r\n            max = Math.max(values...)\r\n            scaler = (x) -> 100*x/(1.4*max)\r\n            forEachCell (x, elem) ->\r\n                text = elem.text()\r\n                wrapper = $(\"<div>\").css\r\n                    \"position\": \"relative\"\r\n                    \"height\": \"55px\"\r\n                wrapper.append $(\"<div>\").css\r\n                    \"position\": \"absolute\"\r\n                    \"bottom\": 0\r\n                    \"left\": 0\r\n                    \"right\": 0\r\n                    \"height\": scaler(x) + \"%\"\r\n                    \"background-color\": \"gray\"\r\n                wrapper.append $(\"<div>\").text(text).css\r\n                    \"position\":\"relative\"\r\n                    \"padding-left\":\"5px\"\r\n                    \"padding-right\":\"5px\"\r\n\r\n                elem.css(\"padding\": 0,\"padding-top\": \"5px\", \"text-align\": \"center\").html wrapper\r\n\r\n        barcharter \".pvtVal.row#{i}\" for i in [0...numRows]\r\n        barcharter \".pvtTotal.colTotal\"\r\n\r\n        return this\r\n","(function() {\n  var callWithJQuery,\n    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },\n    slice = [].slice,\n    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n    hasProp = {}.hasOwnProperty;\n\n  callWithJQuery = function(pivotModule) {\n    if (typeof exports === \"object\" && typeof module === \"object\") {\n      return pivotModule(require(\"jquery\"));\n    } else if (typeof define === \"function\" && define.amd) {\n      return define([\"jquery\"], pivotModule);\n    } else {\n      return pivotModule(jQuery);\n    }\n  };\n\n  callWithJQuery(function($) {\n\n    /*\n    Utilities\n     */\n    var PivotData, addSeparators, aggregatorTemplates, aggregators, dayNamesEn, derivers, getSort, locales, mthNamesEn, naturalSort, numberFormat, pivotTableRenderer, renderers, sortAs, usFmt, usFmtInt, usFmtPct, zeroPad;\n    addSeparators = function(nStr, thousandsSep, decimalSep) {\n      var rgx, x, x1, x2;\n      nStr += '';\n      x = nStr.split('.');\n      x1 = x[0];\n      x2 = x.length > 1 ? decimalSep + x[1] : '';\n      rgx = /(\\d+)(\\d{3})/;\n      while (rgx.test(x1)) {\n        x1 = x1.replace(rgx, '$1' + thousandsSep + '$2');\n      }\n      return x1 + x2;\n    };\n    numberFormat = function(opts) {\n      var defaults;\n      defaults = {\n        digitsAfterDecimal: 2,\n        scaler: 1,\n        thousandsSep: \",\",\n        decimalSep: \".\",\n        prefix: \"\",\n        suffix: \"\",\n        showZero: false\n      };\n      opts = $.extend({}, defaults, opts);\n      return function(x) {\n        var result;\n        if (isNaN(x) || !isFinite(x)) {\n          return \"\";\n        }\n        if (x === 0 && !opts.showZero) {\n          return \"\";\n        }\n        result = addSeparators((opts.scaler * x).toFixed(opts.digitsAfterDecimal), opts.thousandsSep, opts.decimalSep);\n        return \"\" + opts.prefix + result + opts.suffix;\n      };\n    };\n    usFmt = numberFormat();\n    usFmtInt = numberFormat({\n      digitsAfterDecimal: 0\n    });\n    usFmtPct = numberFormat({\n      digitsAfterDecimal: 1,\n      scaler: 100,\n      suffix: \"%\"\n    });\n    aggregatorTemplates = {\n      count: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmtInt;\n        }\n        return function() {\n          return function(data, rowKey, colKey) {\n            return {\n              count: 0,\n              push: function() {\n                return this.count++;\n              },\n              value: function() {\n                return this.count;\n              },\n              format: formatter\n            };\n          };\n        };\n      },\n      countUnique: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmtInt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              uniq: [],\n              push: function(record) {\n                var ref;\n                if (ref = record[attr], indexOf.call(this.uniq, ref) < 0) {\n                  return this.uniq.push(record[attr]);\n                }\n              },\n              value: function() {\n                return this.uniq.length;\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      listUnique: function(sep) {\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              uniq: [],\n              push: function(record) {\n                var ref;\n                if (ref = record[attr], indexOf.call(this.uniq, ref) < 0) {\n                  return this.uniq.push(record[attr]);\n                }\n              },\n              value: function() {\n                return this.uniq.join(sep);\n              },\n              format: function(x) {\n                return x;\n              },\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      sum: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              sum: 0,\n              push: function(record) {\n                if (!isNaN(parseFloat(record[attr]))) {\n                  return this.sum += parseFloat(record[attr]);\n                }\n              },\n              value: function() {\n                return this.sum;\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      min: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              val: null,\n              push: function(record) {\n                var ref, x;\n                x = parseFloat(record[attr]);\n                if (!isNaN(x)) {\n                  return this.val = Math.min(x, (ref = this.val) != null ? ref : x);\n                }\n              },\n              value: function() {\n                return this.val;\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      max: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              val: null,\n              push: function(record) {\n                var ref, x;\n                x = parseFloat(record[attr]);\n                if (!isNaN(x)) {\n                  return this.val = Math.max(x, (ref = this.val) != null ? ref : x);\n                }\n              },\n              value: function() {\n                return this.val;\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      first: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              val: null,\n              sorter: getSort(data != null ? data.sorters : void 0, attr),\n              push: function(record) {\n                var ref, x;\n                x = record[attr];\n                if (this.sorter(x, (ref = this.val) != null ? ref : x) <= 0) {\n                  return this.val = x;\n                }\n              },\n              value: function() {\n                return this.val;\n              },\n              format: function(x) {\n                if (isNaN(x)) {\n                  return x;\n                } else {\n                  return formatter(x);\n                }\n              },\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      last: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              val: null,\n              sorter: getSort(data != null ? data.sorters : void 0, attr),\n              push: function(record) {\n                var ref, x;\n                x = record[attr];\n                if (this.sorter(x, (ref = this.val) != null ? ref : x) >= 0) {\n                  return this.val = x;\n                }\n              },\n              value: function() {\n                return this.val;\n              },\n              format: function(x) {\n                if (isNaN(x)) {\n                  return x;\n                } else {\n                  return formatter(x);\n                }\n              },\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      average: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              sum: 0,\n              len: 0,\n              push: function(record) {\n                if (!isNaN(parseFloat(record[attr]))) {\n                  this.sum += parseFloat(record[attr]);\n                  return this.len++;\n                }\n              },\n              value: function() {\n                return this.sum / this.len;\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      sumOverSum: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var denom, num;\n          num = arg[0], denom = arg[1];\n          return function(data, rowKey, colKey) {\n            return {\n              sumNum: 0,\n              sumDenom: 0,\n              push: function(record) {\n                if (!isNaN(parseFloat(record[num]))) {\n                  this.sumNum += parseFloat(record[num]);\n                }\n                if (!isNaN(parseFloat(record[denom]))) {\n                  return this.sumDenom += parseFloat(record[denom]);\n                }\n              },\n              value: function() {\n                return this.sumNum / this.sumDenom;\n              },\n              format: formatter,\n              numInputs: (num != null) && (denom != null) ? 0 : 2\n            };\n          };\n        };\n      },\n      sumOverSumBound80: function(upper, formatter) {\n        if (upper == null) {\n          upper = true;\n        }\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var denom, num;\n          num = arg[0], denom = arg[1];\n          return function(data, rowKey, colKey) {\n            return {\n              sumNum: 0,\n              sumDenom: 0,\n              push: function(record) {\n                if (!isNaN(parseFloat(record[num]))) {\n                  this.sumNum += parseFloat(record[num]);\n                }\n                if (!isNaN(parseFloat(record[denom]))) {\n                  return this.sumDenom += parseFloat(record[denom]);\n                }\n              },\n              value: function() {\n                var sign;\n                sign = upper ? 1 : -1;\n                return (0.821187207574908 / this.sumDenom + this.sumNum / this.sumDenom + 1.2815515655446004 * sign * Math.sqrt(0.410593603787454 / (this.sumDenom * this.sumDenom) + (this.sumNum * (1 - this.sumNum / this.sumDenom)) / (this.sumDenom * this.sumDenom))) / (1 + 1.642374415149816 / this.sumDenom);\n              },\n              format: formatter,\n              numInputs: (num != null) && (denom != null) ? 0 : 2\n            };\n          };\n        };\n      },\n      fractionOf: function(wrapped, type, formatter) {\n        if (type == null) {\n          type = \"total\";\n        }\n        if (formatter == null) {\n          formatter = usFmtPct;\n        }\n        return function() {\n          var x;\n          x = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n          return function(data, rowKey, colKey) {\n            return {\n              selector: {\n                total: [[], []],\n                row: [rowKey, []],\n                col: [[], colKey]\n              }[type],\n              inner: wrapped.apply(null, x)(data, rowKey, colKey),\n              push: function(record) {\n                return this.inner.push(record);\n              },\n              format: formatter,\n              value: function() {\n                return this.inner.value() / data.getAggregator.apply(data, this.selector).inner.value();\n              },\n              numInputs: wrapped.apply(null, x)().numInputs\n            };\n          };\n        };\n      }\n    };\n    aggregators = (function(tpl) {\n      return {\n        \"Count\": tpl.count(usFmtInt),\n        \"Count Unique Values\": tpl.countUnique(usFmtInt),\n        \"List Unique Values\": tpl.listUnique(\", \"),\n        \"Sum\": tpl.sum(usFmt),\n        \"Integer Sum\": tpl.sum(usFmtInt),\n        \"Average\": tpl.average(usFmt),\n        \"Minimum\": tpl.min(usFmt),\n        \"Maximum\": tpl.max(usFmt),\n        \"First\": tpl.first(usFmt),\n        \"Last\": tpl.last(usFmt),\n        \"Sum over Sum\": tpl.sumOverSum(usFmt),\n        \"80% Upper Bound\": tpl.sumOverSumBound80(true, usFmt),\n        \"80% Lower Bound\": tpl.sumOverSumBound80(false, usFmt),\n        \"Sum as Fraction of Total\": tpl.fractionOf(tpl.sum(), \"total\", usFmtPct),\n        \"Sum as Fraction of Rows\": tpl.fractionOf(tpl.sum(), \"row\", usFmtPct),\n        \"Sum as Fraction of Columns\": tpl.fractionOf(tpl.sum(), \"col\", usFmtPct),\n        \"Count as Fraction of Total\": tpl.fractionOf(tpl.count(), \"total\", usFmtPct),\n        \"Count as Fraction of Rows\": tpl.fractionOf(tpl.count(), \"row\", usFmtPct),\n        \"Count as Fraction of Columns\": tpl.fractionOf(tpl.count(), \"col\", usFmtPct)\n      };\n    })(aggregatorTemplates);\n    renderers = {\n      \"Table\": function(data, opts) {\n        return pivotTableRenderer(data, opts);\n      },\n      \"Table Barchart\": function(data, opts) {\n        return $(pivotTableRenderer(data, opts)).barchart();\n      },\n      \"Heatmap\": function(data, opts) {\n        return $(pivotTableRenderer(data, opts)).heatmap(\"heatmap\", opts);\n      },\n      \"Row Heatmap\": function(data, opts) {\n        return $(pivotTableRenderer(data, opts)).heatmap(\"rowheatmap\", opts);\n      },\n      \"Col Heatmap\": function(data, opts) {\n        return $(pivotTableRenderer(data, opts)).heatmap(\"colheatmap\", opts);\n      }\n    };\n    locales = {\n      en: {\n        aggregators: aggregators,\n        renderers: renderers,\n        localeStrings: {\n          renderError: \"An error occurred rendering the PivotTable results.\",\n          computeError: \"An error occurred computing the PivotTable results.\",\n          uiRenderError: \"An error occurred rendering the PivotTable UI.\",\n          selectAll: \"Select All\",\n          selectNone: \"Select None\",\n          tooMany: \"(too many to list)\",\n          filterResults: \"Filter values\",\n          apply: \"Apply\",\n          cancel: \"Cancel\",\n          totals: \"Totals\",\n          vs: \"vs\",\n          by: \"by\"\n        }\n      }\n    };\n    mthNamesEn = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n    dayNamesEn = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\n    zeroPad = function(number) {\n      return (\"0\" + number).substr(-2, 2);\n    };\n    derivers = {\n      bin: function(col, binWidth) {\n        return function(record) {\n          return record[col] - record[col] % binWidth;\n        };\n      },\n      dateFormat: function(col, formatString, utcOutput, mthNames, dayNames) {\n        var utc;\n        if (utcOutput == null) {\n          utcOutput = false;\n        }\n        if (mthNames == null) {\n          mthNames = mthNamesEn;\n        }\n        if (dayNames == null) {\n          dayNames = dayNamesEn;\n        }\n        utc = utcOutput ? \"UTC\" : \"\";\n        return function(record) {\n          var date;\n          date = new Date(Date.parse(record[col]));\n          if (isNaN(date)) {\n            return \"\";\n          }\n          return formatString.replace(/%(.)/g, function(m, p) {\n            switch (p) {\n              case \"y\":\n                return date[\"get\" + utc + \"FullYear\"]();\n              case \"m\":\n                return zeroPad(date[\"get\" + utc + \"Month\"]() + 1);\n              case \"n\":\n                return mthNames[date[\"get\" + utc + \"Month\"]()];\n              case \"d\":\n                return zeroPad(date[\"get\" + utc + \"Date\"]());\n              case \"w\":\n                return dayNames[date[\"get\" + utc + \"Day\"]()];\n              case \"x\":\n                return date[\"get\" + utc + \"Day\"]();\n              case \"H\":\n                return zeroPad(date[\"get\" + utc + \"Hours\"]());\n              case \"M\":\n                return zeroPad(date[\"get\" + utc + \"Minutes\"]());\n              case \"S\":\n                return zeroPad(date[\"get\" + utc + \"Seconds\"]());\n              default:\n                return \"%\" + p;\n            }\n          });\n        };\n      }\n    };\n    naturalSort = (function(_this) {\n      return function(as, bs) {\n        var a, a1, b, b1, rd, rx, rz;\n        rx = /(\\d+)|(\\D+)/g;\n        rd = /\\d/;\n        rz = /^0/;\n        if (typeof as === \"number\" || typeof bs === \"number\") {\n          if (isNaN(as)) {\n            return 1;\n          }\n          if (isNaN(bs)) {\n            return -1;\n          }\n          return as - bs;\n        }\n        a = String(as);\n        b = String(bs);\n        if (a === b) {\n          return 0;\n        }\n        if (!(rd.test(a) && rd.test(b))) {\n          return (a > b ? 1 : -1);\n        }\n        a = a.match(rx);\n        b = b.match(rx);\n        while (a.length && b.length) {\n          a1 = a.shift();\n          b1 = b.shift();\n          if (a1 !== b1) {\n            if (rd.test(a1) && rd.test(b1)) {\n              return a1.replace(rz, \".0\") - b1.replace(rz, \".0\");\n            } else {\n              return (a1 > b1 ? 1 : -1);\n            }\n          }\n        }\n        return a.length - b.length;\n      };\n    })(this);\n    sortAs = function(order) {\n      var i, l_mapping, mapping, x;\n      mapping = {};\n      l_mapping = {};\n      for (i in order) {\n        x = order[i];\n        mapping[x] = i;\n        if (typeof x === \"string\") {\n          l_mapping[x.toLowerCase()] = i;\n        }\n      }\n      return function(a, b) {\n        if ((mapping[a] != null) && (mapping[b] != null)) {\n          return mapping[a] - mapping[b];\n        } else if (mapping[a] != null) {\n          return -1;\n        } else if (mapping[b] != null) {\n          return 1;\n        } else if ((l_mapping[a] != null) && (l_mapping[b] != null)) {\n          return l_mapping[a] - l_mapping[b];\n        } else if (l_mapping[a] != null) {\n          return -1;\n        } else if (l_mapping[b] != null) {\n          return 1;\n        } else {\n          return naturalSort(a, b);\n        }\n      };\n    };\n    getSort = function(sorters, attr) {\n      var sort;\n      if (sorters != null) {\n        if ($.isFunction(sorters)) {\n          sort = sorters(attr);\n          if ($.isFunction(sort)) {\n            return sort;\n          }\n        } else if (sorters[attr] != null) {\n          return sorters[attr];\n        }\n      }\n      return naturalSort;\n    };\n\n    /*\n    Data Model class\n     */\n    PivotData = (function() {\n      function PivotData(input, opts) {\n        var ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7;\n        if (opts == null) {\n          opts = {};\n        }\n        this.getAggregator = bind(this.getAggregator, this);\n        this.getRowKeys = bind(this.getRowKeys, this);\n        this.getColKeys = bind(this.getColKeys, this);\n        this.sortKeys = bind(this.sortKeys, this);\n        this.arrSort = bind(this.arrSort, this);\n        this.input = input;\n        this.aggregator = (ref = opts.aggregator) != null ? ref : aggregatorTemplates.count()();\n        this.aggregatorName = (ref1 = opts.aggregatorName) != null ? ref1 : \"Count\";\n        this.colAttrs = (ref2 = opts.cols) != null ? ref2 : [];\n        this.rowAttrs = (ref3 = opts.rows) != null ? ref3 : [];\n        this.valAttrs = (ref4 = opts.vals) != null ? ref4 : [];\n        this.sorters = (ref5 = opts.sorters) != null ? ref5 : {};\n        this.derivedAttributes = (ref6 = opts.derivedAttributes) != null ? ref6 : {};\n        this.filter = (ref7 = opts.filter) != null ? ref7 : (function() {\n          return true;\n        });\n        this.tree = {};\n        this.rowKeys = [];\n        this.colKeys = [];\n        this.rowTotals = {};\n        this.colTotals = {};\n        this.allTotal = this.aggregator(this, [], []);\n        this.sorted = false;\n        PivotData.forEachRecord(this.input, this.derivedAttributes, (function(_this) {\n          return function(record) {\n            if (_this.filter(record)) {\n              return _this.processRecord(record);\n            }\n          };\n        })(this));\n      }\n\n      PivotData.forEachRecord = function(input, derivedAttributes, f) {\n        var addRecord, compactRecord, i, j, k, l, len1, record, ref, results, results1, tblCols;\n        if ($.isEmptyObject(derivedAttributes)) {\n          addRecord = f;\n        } else {\n          addRecord = function(record) {\n            var k, ref, v;\n            for (k in derivedAttributes) {\n              v = derivedAttributes[k];\n              record[k] = (ref = v(record)) != null ? ref : record[k];\n            }\n            return f(record);\n          };\n        }\n        if ($.isFunction(input)) {\n          return input(addRecord);\n        } else if ($.isArray(input)) {\n          if ($.isArray(input[0])) {\n            results = [];\n            for (i in input) {\n              if (!hasProp.call(input, i)) continue;\n              compactRecord = input[i];\n              if (!(i > 0)) {\n                continue;\n              }\n              record = {};\n              ref = input[0];\n              for (j in ref) {\n                if (!hasProp.call(ref, j)) continue;\n                k = ref[j];\n                record[k] = compactRecord[j];\n              }\n              results.push(addRecord(record));\n            }\n            return results;\n          } else {\n            results1 = [];\n            for (l = 0, len1 = input.length; l < len1; l++) {\n              record = input[l];\n              results1.push(addRecord(record));\n            }\n            return results1;\n          }\n        } else if (input instanceof jQuery) {\n          tblCols = [];\n          $(\"thead > tr > th\", input).each(function(i) {\n            return tblCols.push($(this).text());\n          });\n          return $(\"tbody > tr\", input).each(function(i) {\n            record = {};\n            $(\"td\", this).each(function(j) {\n              return record[tblCols[j]] = $(this).text();\n            });\n            return addRecord(record);\n          });\n        } else {\n          throw new Error(\"unknown input format\");\n        }\n      };\n\n      PivotData.prototype.forEachMatchingRecord = function(criteria, callback) {\n        return PivotData.forEachRecord(this.input, this.derivedAttributes, (function(_this) {\n          return function(record) {\n            var k, ref, v;\n            if (!_this.filter(record)) {\n              return;\n            }\n            for (k in criteria) {\n              v = criteria[k];\n              if (v !== ((ref = record[k]) != null ? ref : \"null\")) {\n                return;\n              }\n            }\n            return callback(record);\n          };\n        })(this));\n      };\n\n      PivotData.prototype.arrSort = function(attrs) {\n        var a, sortersArr;\n        sortersArr = (function() {\n          var l, len1, results;\n          results = [];\n          for (l = 0, len1 = attrs.length; l < len1; l++) {\n            a = attrs[l];\n            results.push(getSort(this.sorters, a));\n          }\n          return results;\n        }).call(this);\n        return function(a, b) {\n          var comparison, i, sorter;\n          for (i in sortersArr) {\n            if (!hasProp.call(sortersArr, i)) continue;\n            sorter = sortersArr[i];\n            comparison = sorter(a[i], b[i]);\n            if (comparison !== 0) {\n              return comparison;\n            }\n          }\n          return 0;\n        };\n      };\n\n      PivotData.prototype.sortKeys = function() {\n        if (!this.sorted) {\n          this.sorted = true;\n          this.rowKeys.sort(this.arrSort(this.rowAttrs));\n          return this.colKeys.sort(this.arrSort(this.colAttrs));\n        }\n      };\n\n      PivotData.prototype.getColKeys = function() {\n        this.sortKeys();\n        return this.colKeys;\n      };\n\n      PivotData.prototype.getRowKeys = function() {\n        this.sortKeys();\n        return this.rowKeys;\n      };\n\n      PivotData.prototype.processRecord = function(record) {\n        var colKey, flatColKey, flatRowKey, l, len1, len2, n, ref, ref1, ref2, ref3, rowKey, x;\n        colKey = [];\n        rowKey = [];\n        ref = this.colAttrs;\n        for (l = 0, len1 = ref.length; l < len1; l++) {\n          x = ref[l];\n          colKey.push((ref1 = record[x]) != null ? ref1 : \"null\");\n        }\n        ref2 = this.rowAttrs;\n        for (n = 0, len2 = ref2.length; n < len2; n++) {\n          x = ref2[n];\n          rowKey.push((ref3 = record[x]) != null ? ref3 : \"null\");\n        }\n        flatRowKey = rowKey.join(String.fromCharCode(0));\n        flatColKey = colKey.join(String.fromCharCode(0));\n        this.allTotal.push(record);\n        if (rowKey.length !== 0) {\n          if (!this.rowTotals[flatRowKey]) {\n            this.rowKeys.push(rowKey);\n            this.rowTotals[flatRowKey] = this.aggregator(this, rowKey, []);\n          }\n          this.rowTotals[flatRowKey].push(record);\n        }\n        if (colKey.length !== 0) {\n          if (!this.colTotals[flatColKey]) {\n            this.colKeys.push(colKey);\n            this.colTotals[flatColKey] = this.aggregator(this, [], colKey);\n          }\n          this.colTotals[flatColKey].push(record);\n        }\n        if (colKey.length !== 0 && rowKey.length !== 0) {\n          if (!this.tree[flatRowKey]) {\n            this.tree[flatRowKey] = {};\n          }\n          if (!this.tree[flatRowKey][flatColKey]) {\n            this.tree[flatRowKey][flatColKey] = this.aggregator(this, rowKey, colKey);\n          }\n          return this.tree[flatRowKey][flatColKey].push(record);\n        }\n      };\n\n      PivotData.prototype.getAggregator = function(rowKey, colKey) {\n        var agg, flatColKey, flatRowKey;\n        flatRowKey = rowKey.join(String.fromCharCode(0));\n        flatColKey = colKey.join(String.fromCharCode(0));\n        if (rowKey.length === 0 && colKey.length === 0) {\n          agg = this.allTotal;\n        } else if (rowKey.length === 0) {\n          agg = this.colTotals[flatColKey];\n        } else if (colKey.length === 0) {\n          agg = this.rowTotals[flatRowKey];\n        } else {\n          agg = this.tree[flatRowKey][flatColKey];\n        }\n        return agg != null ? agg : {\n          value: (function() {\n            return null;\n          }),\n          format: function() {\n            return \"\";\n          }\n        };\n      };\n\n      return PivotData;\n\n    })();\n    $.pivotUtilities = {\n      aggregatorTemplates: aggregatorTemplates,\n      aggregators: aggregators,\n      renderers: renderers,\n      derivers: derivers,\n      locales: locales,\n      naturalSort: naturalSort,\n      numberFormat: numberFormat,\n      sortAs: sortAs,\n      PivotData: PivotData\n    };\n\n    /*\n    Default Renderer for hierarchical table layout\n     */\n    pivotTableRenderer = function(pivotData, opts) {\n      var aggregator, c, colAttrs, colKey, colKeys, defaults, getClickHandler, i, j, r, result, rowAttrs, rowKey, rowKeys, spanSize, tbody, td, th, thead, totalAggregator, tr, txt, val, x;\n      defaults = {\n        table: {\n          clickCallback: null\n        },\n        localeStrings: {\n          totals: \"Totals\"\n        }\n      };\n      opts = $.extend(true, {}, defaults, opts);\n      colAttrs = pivotData.colAttrs;\n      rowAttrs = pivotData.rowAttrs;\n      rowKeys = pivotData.getRowKeys();\n      colKeys = pivotData.getColKeys();\n      if (opts.table.clickCallback) {\n        getClickHandler = function(value, rowValues, colValues) {\n          var attr, filters, i;\n          filters = {};\n          for (i in colAttrs) {\n            if (!hasProp.call(colAttrs, i)) continue;\n            attr = colAttrs[i];\n            if (colValues[i] != null) {\n              filters[attr] = colValues[i];\n            }\n          }\n          for (i in rowAttrs) {\n            if (!hasProp.call(rowAttrs, i)) continue;\n            attr = rowAttrs[i];\n            if (rowValues[i] != null) {\n              filters[attr] = rowValues[i];\n            }\n          }\n          return function(e) {\n            return opts.table.clickCallback(e, value, filters, pivotData);\n          };\n        };\n      }\n      result = document.createElement(\"table\");\n      result.className = \"pvtTable\";\n      spanSize = function(arr, i, j) {\n        var l, len, n, noDraw, ref, ref1, stop, x;\n        if (i !== 0) {\n          noDraw = true;\n          for (x = l = 0, ref = j; 0 <= ref ? l <= ref : l >= ref; x = 0 <= ref ? ++l : --l) {\n            if (arr[i - 1][x] !== arr[i][x]) {\n              noDraw = false;\n            }\n          }\n          if (noDraw) {\n            return -1;\n          }\n        }\n        len = 0;\n        while (i + len < arr.length) {\n          stop = false;\n          for (x = n = 0, ref1 = j; 0 <= ref1 ? n <= ref1 : n >= ref1; x = 0 <= ref1 ? ++n : --n) {\n            if (arr[i][x] !== arr[i + len][x]) {\n              stop = true;\n            }\n          }\n          if (stop) {\n            break;\n          }\n          len++;\n        }\n        return len;\n      };\n      thead = document.createElement(\"thead\");\n      for (j in colAttrs) {\n        if (!hasProp.call(colAttrs, j)) continue;\n        c = colAttrs[j];\n        tr = document.createElement(\"tr\");\n        if (parseInt(j) === 0 && rowAttrs.length !== 0) {\n          th = document.createElement(\"th\");\n          th.setAttribute(\"colspan\", rowAttrs.length);\n          th.setAttribute(\"rowspan\", colAttrs.length);\n          tr.appendChild(th);\n        }\n        th = document.createElement(\"th\");\n        th.className = \"pvtAxisLabel\";\n        th.textContent = c;\n        tr.appendChild(th);\n        for (i in colKeys) {\n          if (!hasProp.call(colKeys, i)) continue;\n          colKey = colKeys[i];\n          x = spanSize(colKeys, parseInt(i), parseInt(j));\n          if (x !== -1) {\n            th = document.createElement(\"th\");\n            th.className = \"pvtColLabel\";\n            th.textContent = colKey[j];\n            th.setAttribute(\"colspan\", x);\n            if (parseInt(j) === colAttrs.length - 1 && rowAttrs.length !== 0) {\n              th.setAttribute(\"rowspan\", 2);\n            }\n            tr.appendChild(th);\n          }\n        }\n        if (parseInt(j) === 0) {\n          th = document.createElement(\"th\");\n          th.className = \"pvtTotalLabel\";\n          th.innerHTML = opts.localeStrings.totals;\n          th.setAttribute(\"rowspan\", colAttrs.length + (rowAttrs.length === 0 ? 0 : 1));\n          tr.appendChild(th);\n        }\n        thead.appendChild(tr);\n      }\n      if (rowAttrs.length !== 0) {\n        tr = document.createElement(\"tr\");\n        for (i in rowAttrs) {\n          if (!hasProp.call(rowAttrs, i)) continue;\n          r = rowAttrs[i];\n          th = document.createElement(\"th\");\n          th.className = \"pvtAxisLabel\";\n          th.textContent = r;\n          tr.appendChild(th);\n        }\n        th = document.createElement(\"th\");\n        if (colAttrs.length === 0) {\n          th.className = \"pvtTotalLabel\";\n          th.innerHTML = opts.localeStrings.totals;\n        }\n        tr.appendChild(th);\n        thead.appendChild(tr);\n      }\n      result.appendChild(thead);\n      tbody = document.createElement(\"tbody\");\n      for (i in rowKeys) {\n        if (!hasProp.call(rowKeys, i)) continue;\n        rowKey = rowKeys[i];\n        tr = document.createElement(\"tr\");\n        for (j in rowKey) {\n          if (!hasProp.call(rowKey, j)) continue;\n          txt = rowKey[j];\n          x = spanSize(rowKeys, parseInt(i), parseInt(j));\n          if (x !== -1) {\n            th = document.createElement(\"th\");\n            th.className = \"pvtRowLabel\";\n            th.textContent = txt;\n            th.setAttribute(\"rowspan\", x);\n            if (parseInt(j) === rowAttrs.length - 1 && colAttrs.length !== 0) {\n              th.setAttribute(\"colspan\", 2);\n            }\n            tr.appendChild(th);\n          }\n        }\n        for (j in colKeys) {\n          if (!hasProp.call(colKeys, j)) continue;\n          colKey = colKeys[j];\n          aggregator = pivotData.getAggregator(rowKey, colKey);\n          val = aggregator.value();\n          td = document.createElement(\"td\");\n          td.className = \"pvtVal row\" + i + \" col\" + j;\n          td.textContent = aggregator.format(val);\n          td.setAttribute(\"data-value\", val);\n          if (getClickHandler != null) {\n            td.onclick = getClickHandler(val, rowKey, colKey);\n          }\n          tr.appendChild(td);\n        }\n        totalAggregator = pivotData.getAggregator(rowKey, []);\n        val = totalAggregator.value();\n        td = document.createElement(\"td\");\n        td.className = \"pvtTotal rowTotal\";\n        td.textContent = totalAggregator.format(val);\n        td.setAttribute(\"data-value\", val);\n        if (getClickHandler != null) {\n          td.onclick = getClickHandler(val, rowKey, []);\n        }\n        td.setAttribute(\"data-for\", \"row\" + i);\n        tr.appendChild(td);\n        tbody.appendChild(tr);\n      }\n      tr = document.createElement(\"tr\");\n      th = document.createElement(\"th\");\n      th.className = \"pvtTotalLabel\";\n      th.innerHTML = opts.localeStrings.totals;\n      th.setAttribute(\"colspan\", rowAttrs.length + (colAttrs.length === 0 ? 0 : 1));\n      tr.appendChild(th);\n      for (j in colKeys) {\n        if (!hasProp.call(colKeys, j)) continue;\n        colKey = colKeys[j];\n        totalAggregator = pivotData.getAggregator([], colKey);\n        val = totalAggregator.value();\n        td = document.createElement(\"td\");\n        td.className = \"pvtTotal colTotal\";\n        td.textContent = totalAggregator.format(val);\n        td.setAttribute(\"data-value\", val);\n        if (getClickHandler != null) {\n          td.onclick = getClickHandler(val, [], colKey);\n        }\n        td.setAttribute(\"data-for\", \"col\" + j);\n        tr.appendChild(td);\n      }\n      totalAggregator = pivotData.getAggregator([], []);\n      val = totalAggregator.value();\n      td = document.createElement(\"td\");\n      td.className = \"pvtGrandTotal\";\n      td.textContent = totalAggregator.format(val);\n      td.setAttribute(\"data-value\", val);\n      if (getClickHandler != null) {\n        td.onclick = getClickHandler(val, [], []);\n      }\n      tr.appendChild(td);\n      tbody.appendChild(tr);\n      result.appendChild(tbody);\n      result.setAttribute(\"data-numrows\", rowKeys.length);\n      result.setAttribute(\"data-numcols\", colKeys.length);\n      return result;\n    };\n\n    /*\n    Pivot Table core: create PivotData object and call Renderer on it\n     */\n    $.fn.pivot = function(input, inputOpts, locale) {\n      var defaults, e, localeDefaults, localeStrings, opts, pivotData, result, x;\n      if (locale == null) {\n        locale = \"en\";\n      }\n      if (locales[locale] == null) {\n        locale = \"en\";\n      }\n      defaults = {\n        cols: [],\n        rows: [],\n        vals: [],\n        dataClass: PivotData,\n        filter: function() {\n          return true;\n        },\n        aggregator: aggregatorTemplates.count()(),\n        aggregatorName: \"Count\",\n        sorters: {},\n        derivedAttributes: {},\n        renderer: pivotTableRenderer\n      };\n      localeStrings = $.extend(true, {}, locales.en.localeStrings, locales[locale].localeStrings);\n      localeDefaults = {\n        rendererOptions: {\n          localeStrings: localeStrings\n        },\n        localeStrings: localeStrings\n      };\n      opts = $.extend(true, {}, localeDefaults, $.extend({}, defaults, inputOpts));\n      result = null;\n      try {\n        pivotData = new opts.dataClass(input, opts);\n        try {\n          result = opts.renderer(pivotData, opts.rendererOptions);\n        } catch (error) {\n          e = error;\n          if (typeof console !== \"undefined\" && console !== null) {\n            console.error(e.stack);\n          }\n          result = $(\"<span>\").html(opts.localeStrings.renderError);\n        }\n      } catch (error) {\n        e = error;\n        if (typeof console !== \"undefined\" && console !== null) {\n          console.error(e.stack);\n        }\n        result = $(\"<span>\").html(opts.localeStrings.computeError);\n      }\n      x = this[0];\n      while (x.hasChildNodes()) {\n        x.removeChild(x.lastChild);\n      }\n      return this.append(result);\n    };\n\n    /*\n    Pivot Table UI: calls Pivot Table core above with options set by user\n     */\n    $.fn.pivotUI = function(input, inputOpts, overwrite, locale) {\n      var a, aggregator, attr, attrLength, attrValues, cols, config, defaults, e, existingOpts, fn, i, initialRender, l, len1, len2, len3, localeDefaults, localeStrings, materializedInput, n, o, opts, pivotTable, recordsProcessed, ref, ref1, ref2, ref3, refresh, refreshDelayed, renderer, rendererControl, shownAttributes, uiTable, unused, unusedAttrsVerticalAutoCutoff, unusedAttrsVerticalAutoOverride, x;\n      if (overwrite == null) {\n        overwrite = false;\n      }\n      if (locale == null) {\n        locale = \"en\";\n      }\n      if (locales[locale] == null) {\n        locale = \"en\";\n      }\n      defaults = {\n        derivedAttributes: {},\n        aggregators: locales[locale].aggregators,\n        renderers: locales[locale].renderers,\n        hiddenAttributes: [],\n        menuLimit: 500,\n        cols: [],\n        rows: [],\n        vals: [],\n        dataClass: PivotData,\n        exclusions: {},\n        inclusions: {},\n        unusedAttrsVertical: 85,\n        autoSortUnusedAttrs: false,\n        onRefresh: null,\n        filter: function() {\n          return true;\n        },\n        sorters: {}\n      };\n      localeStrings = $.extend(true, {}, locales.en.localeStrings, locales[locale].localeStrings);\n      localeDefaults = {\n        rendererOptions: {\n          localeStrings: localeStrings\n        },\n        localeStrings: localeStrings\n      };\n      existingOpts = this.data(\"pivotUIOptions\");\n      if ((existingOpts == null) || overwrite) {\n        opts = $.extend(true, {}, localeDefaults, $.extend({}, defaults, inputOpts));\n      } else {\n        opts = existingOpts;\n      }\n      try {\n        attrValues = {};\n        materializedInput = [];\n        recordsProcessed = 0;\n        PivotData.forEachRecord(input, opts.derivedAttributes, function(record) {\n          var attr, base, ref, value;\n          if (!opts.filter(record)) {\n            return;\n          }\n          materializedInput.push(record);\n          for (attr in record) {\n            if (!hasProp.call(record, attr)) continue;\n            if (attrValues[attr] == null) {\n              attrValues[attr] = {};\n              if (recordsProcessed > 0) {\n                attrValues[attr][\"null\"] = recordsProcessed;\n              }\n            }\n          }\n          for (attr in attrValues) {\n            value = (ref = record[attr]) != null ? ref : \"null\";\n            if ((base = attrValues[attr])[value] == null) {\n              base[value] = 0;\n            }\n            attrValues[attr][value]++;\n          }\n          return recordsProcessed++;\n        });\n        uiTable = $(\"<div>\", {\n          \"class\": \"pvtUi\"\n        }).attr(\"cellpadding\", 5);\n        rendererControl = $(\"<div>\").addClass('pvtRendererContainer');\n        renderer = $(\"<select>\").addClass('pvtRenderer').addClass('form-control').appendTo(rendererControl).bind(\"change\", function() {\n          return refresh();\n        });\n        ref = opts.renderers;\n        for (x in ref) {\n          if (!hasProp.call(ref, x)) continue;\n          $(\"<option>\").val(x).html(x).appendTo(renderer);\n        }\n        unused = $(\"<div>\").addClass('pvtAxisContainer pvtUnused');\n        shownAttributes = (function() {\n          var results;\n          results = [];\n          for (a in attrValues) {\n            if (indexOf.call(opts.hiddenAttributes, a) < 0) {\n              results.push(a);\n            }\n          }\n          return results;\n        })();\n        unusedAttrsVerticalAutoOverride = false;\n        if (opts.unusedAttrsVertical === \"auto\") {\n          unusedAttrsVerticalAutoCutoff = 120;\n        } else {\n          unusedAttrsVerticalAutoCutoff = parseInt(opts.unusedAttrsVertical);\n        }\n        if (!isNaN(unusedAttrsVerticalAutoCutoff)) {\n          attrLength = 0;\n          for (l = 0, len1 = shownAttributes.length; l < len1; l++) {\n            a = shownAttributes[l];\n            attrLength += a.length;\n          }\n          unusedAttrsVerticalAutoOverride = attrLength > unusedAttrsVerticalAutoCutoff;\n        }\n        unused.addClass('pvtVertList');\n        fn = function(attr) {\n          var attrElem, checkContainer, closeFilterBox, controls, filterItem, filterItemExcluded, finalButtons, hasExcludedItem, len2, n, placeholder, ref1, sorter, triangleLink, v, value, valueCount, valueList, values;\n          values = (function() {\n            var results;\n            results = [];\n            for (v in attrValues[attr]) {\n              results.push(v);\n            }\n            return results;\n          })();\n          hasExcludedItem = false;\n          valueList = $(\"<div>\").addClass('pvtFilterBox').hide();\n          valueList.append($(\"<h4>\").append($(\"<span>\").text(attr), $(\"<span>\").addClass(\"count\").text(\"(\" + values.length + \")\")));\n          if (values.length > opts.menuLimit) {\n            valueList.append($(\"<p>\").html(opts.localeStrings.tooMany));\n          } else {\n            if (values.length > 5) {\n              controls = $(\"<p>\").appendTo(valueList);\n              sorter = getSort(opts.sorters, attr);\n              placeholder = opts.localeStrings.filterResults;\n              $(\"<input>\", {\n                type: \"text\"\n              }).appendTo(controls).attr({\n                placeholder: placeholder,\n                \"class\": \"pvtSearch\"\n              }).bind(\"keyup\", function() {\n                var accept, accept_gen, filter;\n                filter = $(this).val().toLowerCase().trim();\n                accept_gen = function(prefix, accepted) {\n                  return function(v) {\n                    var real_filter, ref1;\n                    real_filter = filter.substring(prefix.length).trim();\n                    if (real_filter.length === 0) {\n                      return true;\n                    }\n                    return ref1 = Math.sign(sorter(v.toLowerCase(), real_filter)), indexOf.call(accepted, ref1) >= 0;\n                  };\n                };\n                accept = filter.startsWith(\">=\") ? accept_gen(\">=\", [1, 0]) : filter.startsWith(\"<=\") ? accept_gen(\"<=\", [-1, 0]) : filter.startsWith(\">\") ? accept_gen(\">\", [1]) : filter.startsWith(\"<\") ? accept_gen(\"<\", [-1]) : filter.startsWith(\"~\") ? function(v) {\n                  if (filter.substring(1).trim().length === 0) {\n                    return true;\n                  }\n                  return v.toLowerCase().match(filter.substring(1));\n                } : function(v) {\n                  return v.toLowerCase().indexOf(filter) !== -1;\n                };\n                return valueList.find('.pvtCheckContainer p label span.value').each(function() {\n                  if (accept($(this).text())) {\n                    return $(this).parent().parent().show();\n                  } else {\n                    return $(this).parent().parent().hide();\n                  }\n                });\n              });\n              controls.append($(\"<br>\"));\n              $(\"<button>\", {\n                type: \"button\"\n              }).addClass('btn').addClass('btn-default').appendTo(controls).html(opts.localeStrings.selectAll).bind(\"click\", function() {\n                valueList.find(\"input:visible:not(:checked)\").prop(\"checked\", true).toggleClass(\"changed\");\n                return false;\n              });\n              $(\"<button>\", {\n                type: \"button\"\n              }).addClass('btn').addClass('btn-default').appendTo(controls).html(opts.localeStrings.selectNone).bind(\"click\", function() {\n                valueList.find(\"input:visible:checked\").prop(\"checked\", false).toggleClass(\"changed\");\n                return false;\n              });\n            }\n            checkContainer = $(\"<div>\").addClass(\"pvtCheckContainer\").appendTo(valueList);\n            ref1 = values.sort(getSort(opts.sorters, attr));\n            for (n = 0, len2 = ref1.length; n < len2; n++) {\n              value = ref1[n];\n              valueCount = attrValues[attr][value];\n              filterItem = $(\"<label>\");\n              filterItemExcluded = false;\n              if (opts.inclusions[attr]) {\n                filterItemExcluded = (indexOf.call(opts.inclusions[attr], value) < 0);\n              } else if (opts.exclusions[attr]) {\n                filterItemExcluded = (indexOf.call(opts.exclusions[attr], value) >= 0);\n              }\n              hasExcludedItem || (hasExcludedItem = filterItemExcluded);\n              $(\"<input>\").attr(\"type\", \"checkbox\").addClass('pvtFilter').attr(\"checked\", !filterItemExcluded).data(\"filter\", [attr, value]).appendTo(filterItem).bind(\"change\", function() {\n                return $(this).toggleClass(\"changed\");\n              });\n              filterItem.append($(\"<span>\").addClass(\"value\").text(value));\n              filterItem.append($(\"<span>\").addClass(\"count\").text(\"(\" + valueCount + \")\"));\n              checkContainer.append($(\"<p>\").append(filterItem));\n            }\n          }\n          closeFilterBox = function() {\n            if (valueList.find(\"[type='checkbox']\").length > valueList.find(\"[type='checkbox']:checked\").length) {\n              attrElem.addClass(\"pvtFilteredAttribute\");\n            } else {\n              attrElem.removeClass(\"pvtFilteredAttribute\");\n            }\n            valueList.find('.pvtSearch').val('');\n            valueList.find('.pvtCheckContainer p').show();\n            return valueList.hide();\n          };\n          finalButtons = $(\"<p>\").appendTo(valueList);\n          if (values.length <= opts.menuLimit) {\n            $(\"<button>\", {\n              type: \"button\"\n            }).addClass('btn').addClass('btn-info').text(opts.localeStrings.apply).appendTo(finalButtons).bind(\"click\", function() {\n              if (valueList.find(\".changed\").removeClass(\"changed\").length) {\n                refresh();\n              }\n              return closeFilterBox();\n            });\n          }\n          $(\"<button>\", {\n            type: \"button\"\n          }).addClass('btn').addClass('btn-default').text(opts.localeStrings.cancel).appendTo(finalButtons).bind(\"click\", function() {\n            valueList.find(\".changed:checked\").removeClass(\"changed\").prop(\"checked\", false);\n            valueList.find(\".changed:not(:checked)\").removeClass(\"changed\").prop(\"checked\", true);\n            return closeFilterBox();\n          });\n          triangleLink = $(\"<span>\").addClass('pvtTriangle').html(\" &#x25BE;\").bind(\"click\", function(e) {\n            var left, ref2, top;\n            ref2 = $(e.currentTarget).position(), left = ref2.left, top = ref2.top;\n            return valueList.css({\n              left: left + 10,\n              top: top + 10\n            }).show();\n          });\n          attrElem = $(\"<li>\").addClass(\"axis_\" + i).append($(\"<span>\").addClass('pvtAttr').text(attr).data(\"attrName\", attr).append(triangleLink));\n          if (hasExcludedItem) {\n            attrElem.addClass('pvtFilteredAttribute');\n          }\n          return unused.append(attrElem).append(valueList);\n        };\n        for (i in shownAttributes) {\n          if (!hasProp.call(shownAttributes, i)) continue;\n          attr = shownAttributes[i];\n          fn(attr);\n        }\n        config = $(\"<div>\").addClass(\"pvtConfigContainer\").appendTo(uiTable);\n        config.append(rendererControl);\n        $(\"<h2>Drag fields to configure the report:</h2>\").appendTo(config);\n        config.append(unused);\n        $(\"<h2>Rows</h2>\").appendTo(config);\n        $(\"<div>\").addClass('pvtAxisContainer pvtRows').appendTo(config);\n        $(\"<h2>Columns</h2>\").appendTo(config);\n        cols = $(\"<div>\").addClass('pvtAxisContainer pvtCols').appendTo(config);\n        aggregator = $(\"<select>\").addClass('pvtAggregator').addClass('form-control').bind(\"change\", function() {\n          return refresh();\n        });\n        ref1 = opts.aggregators;\n        for (x in ref1) {\n          if (!hasProp.call(ref1, x)) continue;\n          aggregator.append($(\"<option>\").val(x).html(x));\n        }\n        $(\"<h2>Values</h2>\").appendTo(config);\n        $(\"<div>\").addClass('pvtVals').appendTo(config).append(aggregator);\n        pivotTable = $(\"<div>\").addClass('pvtRendererArea').appendTo(uiTable);\n        this.html(uiTable);\n        ref2 = opts.cols;\n        for (n = 0, len2 = ref2.length; n < len2; n++) {\n          x = ref2[n];\n          this.find(\".pvtCols\").append(this.find(\".axis_\" + ($.inArray(x, shownAttributes))));\n        }\n        ref3 = opts.rows;\n        for (o = 0, len3 = ref3.length; o < len3; o++) {\n          x = ref3[o];\n          this.find(\".pvtRows\").append(this.find(\".axis_\" + ($.inArray(x, shownAttributes))));\n        }\n        if (opts.aggregatorName != null) {\n          this.find(\".pvtAggregator\").val(opts.aggregatorName);\n        }\n        if (opts.rendererName != null) {\n          this.find(\".pvtRenderer\").val(opts.rendererName);\n        }\n        initialRender = true;\n        refreshDelayed = (function(_this) {\n          return function() {\n            var exclusions, inclusions, len4, newDropdown, numInputsToProcess, pivotUIOptions, pvtVals, q, ref4, ref5, s, subopts, unusedAttrsContainer, vals;\n            subopts = {\n              derivedAttributes: opts.derivedAttributes,\n              localeStrings: opts.localeStrings,\n              rendererOptions: opts.rendererOptions,\n              sorters: opts.sorters,\n              cols: [],\n              rows: [],\n              dataClass: opts.dataClass\n            };\n            numInputsToProcess = (ref4 = opts.aggregators[aggregator.val()]([])().numInputs) != null ? ref4 : 0;\n            vals = [];\n            _this.find(\".pvtRows li span.pvtAttr\").each(function() {\n              return subopts.rows.push($(this).data(\"attrName\"));\n            });\n            _this.find(\".pvtCols li span.pvtAttr\").each(function() {\n              return subopts.cols.push($(this).data(\"attrName\"));\n            });\n            _this.find(\".pvtVals select.pvtAttrDropdown\").each(function() {\n              if (numInputsToProcess === 0) {\n                return $(this).remove();\n              } else {\n                numInputsToProcess--;\n                if ($(this).val() !== \"\") {\n                  return vals.push($(this).val());\n                }\n              }\n            });\n            if (numInputsToProcess !== 0) {\n              pvtVals = _this.find(\".pvtVals\");\n              for (x = q = 0, ref5 = numInputsToProcess; 0 <= ref5 ? q < ref5 : q > ref5; x = 0 <= ref5 ? ++q : --q) {\n                newDropdown = $(\"<select>\").addClass('pvtAttrDropdown').addClass('form-control').append($(\"<option>\")).bind(\"change\", function() {\n                  return refresh();\n                });\n                for (s = 0, len4 = shownAttributes.length; s < len4; s++) {\n                  attr = shownAttributes[s];\n                  newDropdown.append($(\"<option>\").val(attr).text(attr));\n                }\n                pvtVals.append(newDropdown);\n              }\n            }\n            if (initialRender) {\n              vals = opts.vals;\n              i = 0;\n              _this.find(\".pvtVals select.pvtAttrDropdown\").each(function() {\n                $(this).val(vals[i]);\n                return i++;\n              });\n              initialRender = false;\n            }\n            subopts.aggregatorName = aggregator.val();\n            subopts.vals = vals;\n            subopts.aggregator = opts.aggregators[aggregator.val()](vals);\n            subopts.renderer = opts.renderers[renderer.val()];\n            exclusions = {};\n            _this.find('input.pvtFilter').not(':checked').each(function() {\n              var filter;\n              filter = $(this).data(\"filter\");\n              if (exclusions[filter[0]] != null) {\n                return exclusions[filter[0]].push(filter[1]);\n              } else {\n                return exclusions[filter[0]] = [filter[1]];\n              }\n            });\n            inclusions = {};\n            _this.find('input.pvtFilter:checked').each(function() {\n              var filter;\n              filter = $(this).data(\"filter\");\n              if (exclusions[filter[0]] != null) {\n                if (inclusions[filter[0]] != null) {\n                  return inclusions[filter[0]].push(filter[1]);\n                } else {\n                  return inclusions[filter[0]] = [filter[1]];\n                }\n              }\n            });\n            subopts.filter = function(record) {\n              var excludedItems, k, ref6, ref7;\n              if (!opts.filter(record)) {\n                return false;\n              }\n              for (k in exclusions) {\n                excludedItems = exclusions[k];\n                if (ref6 = \"\" + ((ref7 = record[k]) != null ? ref7 : 'null'), indexOf.call(excludedItems, ref6) >= 0) {\n                  return false;\n                }\n              }\n              return true;\n            };\n            pivotTable.pivot(materializedInput, subopts);\n            pivotUIOptions = $.extend({}, opts, {\n              cols: subopts.cols,\n              rows: subopts.rows,\n              vals: vals,\n              exclusions: exclusions,\n              inclusions: inclusions,\n              inclusionsInfo: inclusions,\n              aggregatorName: aggregator.val(),\n              rendererName: renderer.val()\n            });\n            _this.data(\"pivotUIOptions\", pivotUIOptions);\n            if (opts.autoSortUnusedAttrs) {\n              unusedAttrsContainer = _this.find(\"div.pvtUnused.pvtAxisContainer\");\n              $(unusedAttrsContainer).children(\"li\").sort(function(a, b) {\n                return naturalSort($(a).text(), $(b).text());\n              }).appendTo(unusedAttrsContainer);\n            }\n            pivotTable.css(\"opacity\", 1);\n            if (opts.onRefresh != null) {\n              return opts.onRefresh(pivotUIOptions);\n            }\n          };\n        })(this);\n        refresh = (function(_this) {\n          return function() {\n            pivotTable.css(\"opacity\", 0.5);\n            return setTimeout(refreshDelayed, 10);\n          };\n        })(this);\n        refresh();\n        this.find(\".pvtAxisContainer\").sortable({\n          update: function(e, ui) {\n            if (ui.sender == null) {\n              return refresh();\n            }\n          },\n          connectWith: this.find(\".pvtAxisContainer\"),\n          items: 'li',\n          placeholder: 'pvtPlaceholder'\n        });\n      } catch (error) {\n        e = error;\n        if (typeof console !== \"undefined\" && console !== null) {\n          console.error(e.stack);\n        }\n        this.html(opts.localeStrings.uiRenderError);\n      }\n      return this;\n    };\n\n    /*\n    Heatmap post-processing\n     */\n    $.fn.heatmap = function(scope, opts) {\n      var colorScaleGenerator, heatmapper, i, j, l, n, numCols, numRows, ref, ref1, ref2;\n      if (scope == null) {\n        scope = \"heatmap\";\n      }\n      numRows = this.data(\"numrows\");\n      numCols = this.data(\"numcols\");\n      colorScaleGenerator = opts != null ? (ref = opts.heatmap) != null ? ref.colorScaleGenerator : void 0 : void 0;\n      if (colorScaleGenerator == null) {\n        colorScaleGenerator = function(values) {\n          var max, min;\n          min = Math.min.apply(Math, values);\n          max = Math.max.apply(Math, values);\n          return function(x) {\n            var nonRed;\n            nonRed = 255 - Math.round(255 * (x - min) / (max - min));\n            return \"rgb(255,\" + nonRed + \",\" + nonRed + \")\";\n          };\n        };\n      }\n      heatmapper = (function(_this) {\n        return function(scope) {\n          var colorScale, forEachCell, values;\n          forEachCell = function(f) {\n            return _this.find(scope).each(function() {\n              var x;\n              x = $(this).data(\"value\");\n              if ((x != null) && isFinite(x)) {\n                return f(x, $(this));\n              }\n            });\n          };\n          values = [];\n          forEachCell(function(x) {\n            return values.push(x);\n          });\n          colorScale = colorScaleGenerator(values);\n          return forEachCell(function(x, elem) {\n            return elem.css(\"background-color\", colorScale(x));\n          });\n        };\n      })(this);\n      switch (scope) {\n        case \"heatmap\":\n          heatmapper(\".pvtVal\");\n          break;\n        case \"rowheatmap\":\n          for (i = l = 0, ref1 = numRows; 0 <= ref1 ? l < ref1 : l > ref1; i = 0 <= ref1 ? ++l : --l) {\n            heatmapper(\".pvtVal.row\" + i);\n          }\n          break;\n        case \"colheatmap\":\n          for (j = n = 0, ref2 = numCols; 0 <= ref2 ? n < ref2 : n > ref2; j = 0 <= ref2 ? ++n : --n) {\n            heatmapper(\".pvtVal.col\" + j);\n          }\n      }\n      heatmapper(\".pvtTotal.rowTotal\");\n      heatmapper(\".pvtTotal.colTotal\");\n      return this;\n    };\n\n    /*\n    Barchart post-processing\n     */\n    return $.fn.barchart = function() {\n      var barcharter, i, l, numCols, numRows, ref;\n      numRows = this.data(\"numrows\");\n      numCols = this.data(\"numcols\");\n      barcharter = (function(_this) {\n        return function(scope) {\n          var forEachCell, max, scaler, values;\n          forEachCell = function(f) {\n            return _this.find(scope).each(function() {\n              var x;\n              x = $(this).data(\"value\");\n              if ((x != null) && isFinite(x)) {\n                return f(x, $(this));\n              }\n            });\n          };\n          values = [];\n          forEachCell(function(x) {\n            return values.push(x);\n          });\n          max = Math.max.apply(Math, values);\n          scaler = function(x) {\n            return 100 * x / (1.4 * max);\n          };\n          return forEachCell(function(x, elem) {\n            var text, wrapper;\n            text = elem.text();\n            wrapper = $(\"<div>\").css({\n              \"position\": \"relative\",\n              \"height\": \"55px\"\n            });\n            wrapper.append($(\"<div>\").css({\n              \"position\": \"absolute\",\n              \"bottom\": 0,\n              \"left\": 0,\n              \"right\": 0,\n              \"height\": scaler(x) + \"%\",\n              \"background-color\": \"gray\"\n            }));\n            wrapper.append($(\"<div>\").text(text).css({\n              \"position\": \"relative\",\n              \"padding-left\": \"5px\",\n              \"padding-right\": \"5px\"\n            }));\n            return elem.css({\n              \"padding\": 0,\n              \"padding-top\": \"5px\",\n              \"text-align\": \"center\"\n            }).html(wrapper);\n          });\n        };\n      })(this);\n      for (i = l = 0, ref = numRows; 0 <= ref ? l < ref : l > ref; i = 0 <= ref ? ++l : --l) {\n        barcharter(\".pvtVal.row\" + i);\n      }\n      barcharter(\".pvtTotal.colTotal\");\n      return this;\n    };\n  });\n\n}).call(this);\n\n//# sourceMappingURL=pivot.js.map\n"]}