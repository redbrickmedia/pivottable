{"version":3,"sources":["pivot_spec.coffee","pivot_spec.min.js"],"names":["fixtureData","raggedFixtureData","name","colour","age","gender","describe","table","beforeEach","done","$","pivotUI","onRefresh","it","expect","find","length","toBe","val","text","join","data","rows","cols","aggregatorName","vals","rendererName","pivot","aggregators","derivers","ref","sortAs","pivotUtilities","aggregator","filter","record","derivedAttributes","birthyear","dateFormat","trialbins","bin","sorters","attr","received_PivotData","received_rendererOptions","count2x","push","this","value","format","x","renderer","a","b","addClass","greeting","rendererOptions","agg","getAggregator","sumOverSumOpts","aoaInput","pd","PivotData","aosInput","raggedAosInput","functionInput","tableInput","getRowKeys","toEqual","getColKeys","c","i","j","len","len1","numNotNull","numNull","r","ref1","records","forEachMatchingRecord","naturalSort","sort","numberFormat","nf","scaler","suffix","thousandsSep","decimalSep","prefix","digitsAfterDecimal","showZero","df","Date","binner","toBeNaN","call"],"mappings":"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","file":"pivot_spec.min.js","sourcesContent":["fixtureData = [\r\n    [\"name\",    \"gender\",   \"colour\",    \"birthday\",     \"trials\",   \"successes\"],\r\n    [\"Nick\",    \"male\",     \"blue\",      \"1982-11-07\",   103,        12],\r\n    [\"Jane\",    \"female\",   \"red\",       \"1982-11-08\",   95,         25],\r\n    [\"John\",    \"male\",     \"blue\",      \"1982-12-08\",   112,        30],\r\n    [\"Carol\",   \"female\",   \"yellow\",    \"1983-12-08\",   102,        14]\r\n]\r\n\r\nraggedFixtureData = [\r\n    {name: \"Nick\", \"colour\": \"red\", \"age\": 34}\r\n    {name: \"Jane\", \"gender\": \"female\"}\r\n    {name: \"John\", \"gender\": \"male\", \"age\": 12}\r\n    {name: \"Jim\", \"gender\": null, \"age\": 12}\r\n]\r\n\r\ndescribe \"$.pivotUI()\", ->\r\n    describe \"with no rows/cols, default count aggregator, default TableRenderer\",  ->\r\n        table = null\r\n\r\n        beforeEach (done) ->\r\n            table = $(\"<div>\").pivotUI fixtureData, onRefresh: done\r\n        it \"has all the basic UI elements\", (done) ->\r\n            expect table.find(\"td.pvtAxisContainer\").length\r\n            .toBe  3\r\n            expect table.find(\"td.pvtRendererArea\").length\r\n            .toBe  1\r\n            expect table.find(\"td.pvtVals\").length\r\n            .toBe  1\r\n            expect table.find(\"select.pvtRenderer\").length\r\n            .toBe  1\r\n            expect table.find(\"select.pvtAggregator\").length\r\n            .toBe  1\r\n            expect table.find(\"span.pvtAttr\").length\r\n            .toBe  6\r\n            done()\r\n\r\n        it \"reflects its inputs\", (done) ->\r\n            expect table.find(\"td.pvtUnused span.pvtAttr\").length\r\n            .toBe  6\r\n            expect table.find(\"select.pvtRenderer\").val()\r\n            .toBe  \"Table\"\r\n            expect table.find(\"select.pvtAggregator\").val()\r\n            .toBe  \"Count\"\r\n            done()\r\n\r\n        it \"renders a table\", (done) ->\r\n            expect table.find(\"table.pvtTable\").length\r\n            .toBe  1\r\n            done()\r\n\r\n\r\n        describe \"its renderer output\", ->\r\n            it \"has the correct type and number of cells\", (done) ->\r\n                expect table.find(\"th.pvtTotalLabel\").length\r\n                .toBe  1\r\n                expect table.find(\"td.pvtGrandTotal\").length\r\n                .toBe  1\r\n                done()\r\n\r\n            it \"has the correct textual representation\", (done) ->\r\n                expect table.find(\"table.pvtTable\").text()\r\n                .toBe [\"Totals\", \"4\"].join(\"\")\r\n                done()\r\n\r\n            it \"has a correct grand total with data value\", (done) ->\r\n                expect table.find(\"td.pvtGrandTotal\").text()\r\n                .toBe  \"4\"\r\n                expect table.find(\"td.pvtGrandTotal\").data(\"value\")\r\n                .toBe  4\r\n                done()\r\n\r\n    describe \"with rows/cols, sum-over-sum aggregator, Heatmap renderer\",  ->\r\n        table = null\r\n\r\n        beforeEach (done) ->\r\n            table = $(\"<div>\").pivotUI fixtureData,\r\n                rows: [\"gender\"], cols: [\"colour\"]\r\n                aggregatorName: \"Sum over Sum\"\r\n                vals: [\"successes\", \"trials\"]\r\n                rendererName: \"Heatmap\"\r\n                onRefresh: done\r\n\r\n        it \"has all the basic UI elements\", (done) ->\r\n            expect table.find(\"td.pvtAxisContainer\").length\r\n            .toBe  3\r\n            expect table.find(\"td.pvtRendererArea\").length\r\n            .toBe  1\r\n            expect table.find(\"td.pvtVals\").length\r\n            .toBe  1\r\n            expect table.find(\"select.pvtRenderer\").length\r\n            .toBe  1\r\n            expect table.find(\"select.pvtAggregator\").length\r\n            .toBe  1\r\n            expect table.find(\"span.pvtAttr\").length\r\n            .toBe  6\r\n            done()\r\n\r\n        it \"reflects its inputs\", (done) ->\r\n            expect table.find(\"td.pvtUnused span.pvtAttr\").length\r\n            .toBe  4\r\n            expect table.find(\"td.pvtRows span.pvtAttr\").length\r\n            .toBe  1\r\n            expect table.find(\"td.pvtCols span.pvtAttr\").length\r\n            .toBe  1\r\n            expect table.find(\"select.pvtRenderer\").val()\r\n            .toBe  \"Heatmap\"\r\n            expect table.find(\"select.pvtAggregator\").val()\r\n            .toBe  \"Sum over Sum\"\r\n            done()\r\n\r\n        it \"renders a table\", (done) ->\r\n            expect table.find(\"table.pvtTable\").length\r\n            .toBe  1\r\n            done()\r\n\r\n        describe \"its renderer output\", ->\r\n            it \"has the correct type and number of cells\", (done) ->\r\n                expect table.find(\"th.pvtAxisLabel\").length\r\n                .toBe  2\r\n                expect table.find(\"th.pvtRowLabel\").length\r\n                .toBe  2\r\n                expect table.find(\"th.pvtColLabel\").length\r\n                .toBe  3\r\n                expect table.find(\"th.pvtTotalLabel\").length\r\n                .toBe  2\r\n                expect table.find(\"td.pvtVal\").length\r\n                .toBe  6\r\n                expect table.find(\"td.pvtTotal\").length\r\n                .toBe  5\r\n                expect table.find(\"td.pvtGrandTotal\").length\r\n                .toBe  1\r\n                done()\r\n\r\n            it \"has the correct textual representation\", (done) ->\r\n                expect table.find(\"table.pvtTable\").text()\r\n                .toBe [\r\n                    \"colour\",   \"blue\", \"red\",  \"yellow\",   \"Totals\",\r\n                    \"gender\",\r\n                    \"female\",           \"0.26\", \"0.14\",     \"0.20\",\r\n                    \"male\",     \"0.20\",                     \"0.20\",\r\n                    \"Totals\",   \"0.20\", \"0.26\", \"0.14\",     \"0.20\"\r\n                    ].join(\"\")\r\n                done()\r\n\r\n            it \"has a correct spot-checked cell with data value\", (done) ->\r\n                expect table.find(\"td.col0.row1\").text()\r\n                .toBe  \"0.20\"\r\n                expect table.find(\"td.col0.row1\").data(\"value\")\r\n                .toBe  (12+30)/(103+112)\r\n                done()\r\n\r\n    describe \"with ragged input\",  ->\r\n        table = $(\"<div>\").pivotUI raggedFixtureData, rows: [\"gender\"], cols: [\"age\"]\r\n\r\n        it \"renders a table with the correct textual representation\", ->\r\n            expect table.find(\"table.pvtTable\").text()\r\n            .toBe [\r\n                \"age\",     \"12\",  \"34\",  \"null\",  \"Totals\"\r\n                \"gender\",\r\n                \"female\",                 \"1\",    \"1\"\r\n                \"male\",    \"1\",                   \"1\"\r\n                \"null\",    \"1\",    \"1\",           \"2\"\r\n                \"Totals\",  \"2\",    \"1\",   \"1\",    \"4\"\r\n                ].join(\"\")\r\n\r\ndescribe \"$.pivot()\", ->\r\n\r\n    describe \"with no rows/cols, default count aggregator, default TableRenderer\",  ->\r\n        table = $(\"<div>\").pivot fixtureData\r\n\r\n        it \"renders a table\", ->\r\n            expect table.find(\"table.pvtTable\").length\r\n            .toBe  1\r\n\r\n        describe \"its renderer output\", ->\r\n\r\n            it \"has the correct textual representation\", ->\r\n                expect table.find(\"table.pvtTable\").text()\r\n                .toBe [\"Totals\", \"4\"].join(\"\")\r\n\r\n            it \"has a correct grand total with data value\", ->\r\n                expect table.find(\"td.pvtGrandTotal\").text()\r\n                .toBe  \"4\"\r\n                expect table.find(\"td.pvtGrandTotal\").data(\"value\")\r\n                .toBe  4\r\n\r\n    describe \"with rows/cols, sum aggregator, derivedAttributes, filter and sorters\",  ->\r\n        {sortAs, derivers, aggregators} = $.pivotUtilities\r\n        table = $(\"<div>\").pivot fixtureData,\r\n            rows: [\"gender\"], cols: [\"birthyear\"], aggregator: aggregators[\"Sum\"]([\"trialbins\"])\r\n            filter: (record) -> record.name != \"Nick\"\r\n            derivedAttributes:\r\n                birthyear: derivers.dateFormat \"birthday\", \"%y\"\r\n                trialbins: derivers.bin \"trials\", 10\r\n            sorters: (attr) ->\r\n                if attr == \"gender\" then return sortAs([\"male\", \"female\"])\r\n\r\n        it \"renders a table with the correct textual representation\", ->\r\n            expect table.find(\"table.pvtTable\").text()\r\n            .toBe [\r\n                \"birthyear\",    \"1982\",     \"1983\",     \"Totals\"\r\n                \"gender\",\r\n                \"male\",         \"110.00\",               \"110.00\"\r\n                \"female\",       \"90.00\",    \"100.00\",   \"190.00\"\r\n                \"Totals\",       \"200.00\",   \"100.00\",   \"300.00\"\r\n                ].join(\"\")\r\n\r\n    describe \"with rows/cols, fraction-of aggregator\",  ->\r\n        {aggregators} = $.pivotUtilities\r\n        table = $(\"<div>\").pivot fixtureData,\r\n            rows: [\"gender\"]\r\n            aggregator: aggregators[\"Sum as Fraction of Total\"]([\"trials\"])\r\n\r\n        it \"renders a table with the correct textual representation\", ->\r\n            expect table.find(\"table.pvtTable\").text()\r\n            .toBe [\r\n                \"gender\",  \"Totals\"\r\n                \"female\",  \"47.8%\"\r\n                \"male\",    \"52.2%\"\r\n                \"Totals\",  \"100.0%\"\r\n                ].join(\"\")\r\n\r\n    describe \"with rows/cols, custom aggregator, custom renderer with options\",  ->\r\n        received_PivotData = null\r\n        received_rendererOptions = null\r\n\r\n        table = $(\"<div>\").pivot fixtureData,\r\n            rows: [\"name\", \"colour\"], cols: [\"trials\", \"successes\"]\r\n            aggregator: ->\r\n                count2x: 0\r\n                push: -> @count2x +=2\r\n                value: -> @count2x\r\n                format: (x) -> \"formatted \" + x\r\n            renderer: (a,b) ->\r\n                received_PivotData = a\r\n                received_rendererOptions = b\r\n                return $(\"<div>\").addClass(b.greeting).text(\"world\")\r\n            rendererOptions: {greeting:\"hithere\"}\r\n\r\n        it \"renders the custom renderer as per options\", ->\r\n            expect table.find(\"div.hithere\").length\r\n            .toBe  1\r\n\r\n        describe \"its received PivotData object\", ->\r\n            it \"has a correct grand total value and format for custom aggregator\", ->\r\n                agg = received_PivotData.getAggregator([],[])\r\n                val = agg.value()\r\n                expect(val).toBe 8\r\n                expect(agg.format(val)).toBe \"formatted 8\"\r\n\r\n\r\n    describe \"with ragged input\",  ->\r\n        table = $(\"<div>\").pivot raggedFixtureData, rows: [\"gender\"], cols: [\"age\"]\r\n\r\n        it \"renders a table with the correct textual representation\", ->\r\n            expect table.find(\"table.pvtTable\").text()\r\n            .toBe [\r\n                \"age\",     \"12\",  \"34\",  \"null\",  \"Totals\"\r\n                \"gender\",\r\n                \"female\",                 \"1\",    \"1\"\r\n                \"male\",    \"1\",                   \"1\"\r\n                \"null\",    \"1\",    \"1\",           \"2\"\r\n                \"Totals\",  \"2\",    \"1\",   \"1\",    \"4\"\r\n                ].join(\"\")\r\n\r\ndescribe \"$.pivotUtilities\", ->\r\n\r\n    describe \".PivotData()\", ->\r\n        sumOverSumOpts =\r\n            aggregator: $.pivotUtilities.aggregators[\"Sum over Sum\"]([\"a\",\"b\"])\r\n\r\n        describe \"with no options\", ->\r\n            aoaInput =  [ [\"a\",\"b\"], [1,2], [3,4] ]\r\n            pd = new $.pivotUtilities.PivotData aoaInput\r\n\r\n            it \"has the correct grand total value\", ->\r\n                expect pd.getAggregator([],[]).value()\r\n                .toBe 2\r\n\r\n        describe \"with array-of-array input\", ->\r\n            aoaInput =  [ [\"a\",\"b\"], [1,2], [3,4] ]\r\n            pd = new $.pivotUtilities.PivotData aoaInput, sumOverSumOpts\r\n\r\n            it \"has the correct grand total value\", ->\r\n                expect pd.getAggregator([],[]).value()\r\n                .toBe (1+3)/(2+4)\r\n\r\n        describe \"with array-of-object input\", ->\r\n            aosInput =  [ {a:1, b:2}, {a:3, b:4} ]\r\n            pd = new $.pivotUtilities.PivotData aosInput, sumOverSumOpts\r\n\r\n            it \"has the correct grand total value\", ->\r\n                expect pd.getAggregator([],[]).value()\r\n                .toBe (1+3)/(2+4)\r\n\r\n        describe \"with ragged array-of-object input\", ->\r\n            raggedAosInput =  [ {a:1}, {b:4}, {a: 3, b: 2} ]\r\n            pd = new $.pivotUtilities.PivotData raggedAosInput, sumOverSumOpts\r\n\r\n            it \"has the correct grand total value\", ->\r\n                expect pd.getAggregator([],[]).value()\r\n                .toBe (1+3)/(2+4)\r\n\r\n        describe \"with function input\", ->\r\n            functionInput = (record) ->\r\n                record a:1, b:2\r\n                record a:3, b:4\r\n            pd = new $.pivotUtilities.PivotData functionInput, sumOverSumOpts\r\n\r\n            it \"has the correct grand total value\", ->\r\n                expect pd.getAggregator([],[]).value()\r\n                .toBe (1+3)/(2+4)\r\n\r\n        describe \"with jQuery table element input\", ->\r\n            tableInput = $ \"\"\"\r\n                <table>\r\n                    <thead>\r\n                        <tr> <th>a</th><th>b</th> </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr> <td>1</td> <td>2</td> </tr>\r\n                        <tr> <td>3</td> <td>4</td> </tr>\r\n                    </tbody>\r\n                </table>\r\n                \"\"\"\r\n            pd = new $.pivotUtilities.PivotData tableInput, sumOverSumOpts\r\n\r\n            it \"has the correct grand total value\", ->\r\n                expect pd.getAggregator([],[]).value()\r\n                .toBe (1+3)/(2+4)\r\n\r\n\r\n        describe \"with rows/cols\", ->\r\n            pd = new $.pivotUtilities.PivotData fixtureData,\r\n                rows: [\"name\", \"colour\"],\r\n                cols: [\"trials\", \"successes\"]\r\n\r\n            it \"has correctly-ordered row keys\", ->\r\n                expect pd.getRowKeys()\r\n                .toEqual [ [ 'Carol', 'yellow' ], [ 'Jane', 'red' ], [ 'John', 'blue' ], [ 'Nick', 'blue' ] ]\r\n\r\n            it \"has correctly-ordered col keys\", ->\r\n                expect pd.getColKeys()\r\n                .toEqual [ [ 95, 25 ], [ 102, 14 ], [ 103, 12 ], [ 112, 30 ] ]\r\n\r\n            it \"can be iterated over\", ->\r\n                numNotNull = 0\r\n                numNull = 0\r\n                for r in pd.getRowKeys()\r\n                    for c in pd.getColKeys()\r\n                        if pd.getAggregator(r, c).value()?\r\n                            numNotNull++\r\n                        else\r\n                            numNull++\r\n                expect numNotNull\r\n                .toBe 4\r\n                expect numNull\r\n                .toBe 12\r\n\r\n            it \"returns matching records\", ->\r\n                records = []\r\n                pd.forEachMatchingRecord gender: \"male\", (x) -> records.push(x.name)\r\n                expect records\r\n                .toEqual [\"Nick\", \"John\"]\r\n\r\n            it \"has a correct spot-checked aggregator\", ->\r\n                agg = pd.getAggregator([ 'Carol', 'yellow' ],[ 102, 14 ])\r\n                val = agg.value()\r\n                expect(val).toBe 1\r\n                expect(agg.format(val)).toBe \"1\"\r\n\r\n            it \"has a correct grand total aggregator\", ->\r\n                agg = pd.getAggregator([],[])\r\n                val = agg.value()\r\n                expect(val).toBe 4\r\n                expect(agg.format(val)).toBe \"4\"\r\n\r\n    describe \".naturalSort()\", ->\r\n        naturalSort = $.pivotUtilities.naturalSort\r\n\r\n        it \"sorts numbers\", ->\r\n            expect [2,1,3,4,0].sort naturalSort\r\n            .toEqual [0,1,2,3,4]\r\n\r\n        it \"sorts strings case-sensitively\", ->\r\n            expect ['b','a','c','d','A','a','A'].sort naturalSort\r\n            .toEqual ['A','A','a','a','b','c','d']\r\n\r\n        it \"sorts numbers in strings\", ->\r\n            expect ['1','12','2','10','11','112'].sort naturalSort\r\n            .toEqual ['1','2','10','11','12','112']\r\n\r\n        it \"sorts 0-padded numbers\", ->\r\n            expect ['02','01','10','11'].sort naturalSort\r\n            .toEqual ['01','02','10','11']\r\n\r\n    describe \".sortAs()\", ->\r\n        sortAs = $.pivotUtilities.sortAs\r\n\r\n        it \"sorts with unknown values sorted at the end\", ->\r\n            expect [5,2,3,4,1].sort sortAs([4,3,2])\r\n            .toEqual [4,3,2,1,5]\r\n\r\n        it \"sorts lowercase after uppercase\", ->\r\n            expect [\"Ab\",\"aA\",\"aa\",\"ab\"].sort sortAs([\"Ab\",\"Aa\"])\r\n            .toEqual [\"Ab\",\"ab\",\"aa\",\"aA\"]\r\n\r\n    describe \".numberFormat()\", ->\r\n        numberFormat = $.pivotUtilities.numberFormat\r\n\r\n        it \"formats numbers\", ->\r\n            nf = numberFormat()\r\n            expect nf 1234567.89123456\r\n            .toEqual \"1,234,567.89\"\r\n\r\n        it \"formats booleans\", ->\r\n            nf = numberFormat()\r\n            expect nf true\r\n            .toEqual \"1.00\"\r\n\r\n        it \"formats numbers in strings\", ->\r\n            nf = numberFormat()\r\n            expect nf \"1234567.89123456\"\r\n            .toEqual \"1,234,567.89\"\r\n\r\n        it \"doesn't formats strings\", ->\r\n            nf = numberFormat()\r\n            expect nf \"hi there\"\r\n            .toEqual \"\"\r\n\r\n        it \"doesn't formats objects\", ->\r\n            nf = numberFormat()\r\n            expect nf {a:1}\r\n            .toEqual \"\"\r\n\r\n        it \"formats percentages\", ->\r\n            nf = numberFormat(scaler: 100, suffix: \"%\")\r\n            expect nf 0.12345\r\n            .toEqual \"12.35%\"\r\n\r\n        it \"adds separators\", ->\r\n            nf = numberFormat(thousandsSep: \"a\", decimalSep: \"b\")\r\n            expect nf 1234567.89123456\r\n            .toEqual \"1a234a567b89\"\r\n\r\n        it \"adds prefixes and suffixes\", ->\r\n            nf = numberFormat(prefix: \"a\", suffix: \"b\")\r\n            expect nf 1234567.89123456\r\n            .toEqual \"a1,234,567.89b\"\r\n\r\n        it \"scales and rounds\", ->\r\n            nf = numberFormat(digitsAfterDecimal: 3, scaler: 1000)\r\n            expect nf 1234567.89123456\r\n            .toEqual \"1,234,567,891.235\"\r\n\r\n        it \"shows and hides zero\", ->\r\n            nf = numberFormat(showZero: true)\r\n            expect nf 0\r\n            .toEqual \"0.00\"\r\n\r\n            nf = numberFormat(showZero: false)\r\n            expect nf 0\r\n            .toEqual \"\"\r\n\r\n    describe \".derivers\", ->\r\n        describe \".dateFormat()\", ->\r\n            df = $.pivotUtilities.derivers.dateFormat \"x\", \"abc % %% %%% %a %y %m %n %d %w %x %H %M %S\", true\r\n\r\n            it \"formats date objects\", ->\r\n                expect df {x: new Date(\"2015-01-02T23:43:11Z\")}\r\n                .toBe 'abc % %% %%% %a 2015 01 Jan 02 Fri 5 23 43 11'\r\n\r\n            it \"formats input parsed by Date.parse()\", ->\r\n                expect df {x: \"2015-01-02T23:43:11Z\"}\r\n                .toBe 'abc % %% %%% %a 2015 01 Jan 02 Fri 5 23 43 11'\r\n\r\n                expect df {x: \"bla\"}\r\n                .toBe ''\r\n\r\n        describe \".bin()\", ->\r\n            binner = $.pivotUtilities.derivers.bin \"x\", 10\r\n\r\n            it \"bins numbers\", ->\r\n                expect binner {x: 11}\r\n                .toBe 10\r\n\r\n                expect binner {x: 9}\r\n                .toBe 0\r\n\r\n                expect binner {x: 111}\r\n                .toBe 110\r\n\r\n            it \"bins booleans\", ->\r\n                expect binner {x: true}\r\n                .toBe 0\r\n\r\n            it \"bins negative numbers\", ->\r\n                expect binner {x: -12}\r\n                .toBe -10\r\n\r\n            it \"doesn't bin strings\", ->\r\n                expect binner {x: \"a\"}\r\n                .toBeNaN()\r\n\r\n            it \"doesn't bin objects\", ->\r\n                expect binner {x: {a:1}}\r\n                .toBeNaN()\r\n\r\n# todo\r\n# agg templates\r\n# date.parse -> date() ?\r\n# default options for PivotData, including filter\r\n","(function() {\n  var fixtureData, raggedFixtureData;\n\n  fixtureData = [[\"name\", \"gender\", \"colour\", \"birthday\", \"trials\", \"successes\"], [\"Nick\", \"male\", \"blue\", \"1982-11-07\", 103, 12], [\"Jane\", \"female\", \"red\", \"1982-11-08\", 95, 25], [\"John\", \"male\", \"blue\", \"1982-12-08\", 112, 30], [\"Carol\", \"female\", \"yellow\", \"1983-12-08\", 102, 14]];\n\n  raggedFixtureData = [\n    {\n      name: \"Nick\",\n      \"colour\": \"red\",\n      \"age\": 34\n    }, {\n      name: \"Jane\",\n      \"gender\": \"female\"\n    }, {\n      name: \"John\",\n      \"gender\": \"male\",\n      \"age\": 12\n    }, {\n      name: \"Jim\",\n      \"gender\": null,\n      \"age\": 12\n    }\n  ];\n\n  describe(\"$.pivotUI()\", function() {\n    describe(\"with no rows/cols, default count aggregator, default TableRenderer\", function() {\n      var table;\n      table = null;\n      beforeEach(function(done) {\n        return table = $(\"<div>\").pivotUI(fixtureData, {\n          onRefresh: done\n        });\n      });\n      it(\"has all the basic UI elements\", function(done) {\n        expect(table.find(\"td.pvtAxisContainer\").length).toBe(3);\n        expect(table.find(\"td.pvtRendererArea\").length).toBe(1);\n        expect(table.find(\"td.pvtVals\").length).toBe(1);\n        expect(table.find(\"select.pvtRenderer\").length).toBe(1);\n        expect(table.find(\"select.pvtAggregator\").length).toBe(1);\n        expect(table.find(\"span.pvtAttr\").length).toBe(6);\n        return done();\n      });\n      it(\"reflects its inputs\", function(done) {\n        expect(table.find(\"td.pvtUnused span.pvtAttr\").length).toBe(6);\n        expect(table.find(\"select.pvtRenderer\").val()).toBe(\"Table\");\n        expect(table.find(\"select.pvtAggregator\").val()).toBe(\"Count\");\n        return done();\n      });\n      it(\"renders a table\", function(done) {\n        expect(table.find(\"table.pvtTable\").length).toBe(1);\n        return done();\n      });\n      return describe(\"its renderer output\", function() {\n        it(\"has the correct type and number of cells\", function(done) {\n          expect(table.find(\"th.pvtTotalLabel\").length).toBe(1);\n          expect(table.find(\"td.pvtGrandTotal\").length).toBe(1);\n          return done();\n        });\n        it(\"has the correct textual representation\", function(done) {\n          expect(table.find(\"table.pvtTable\").text()).toBe([\"Totals\", \"4\"].join(\"\"));\n          return done();\n        });\n        return it(\"has a correct grand total with data value\", function(done) {\n          expect(table.find(\"td.pvtGrandTotal\").text()).toBe(\"4\");\n          expect(table.find(\"td.pvtGrandTotal\").data(\"value\")).toBe(4);\n          return done();\n        });\n      });\n    });\n    describe(\"with rows/cols, sum-over-sum aggregator, Heatmap renderer\", function() {\n      var table;\n      table = null;\n      beforeEach(function(done) {\n        return table = $(\"<div>\").pivotUI(fixtureData, {\n          rows: [\"gender\"],\n          cols: [\"colour\"],\n          aggregatorName: \"Sum over Sum\",\n          vals: [\"successes\", \"trials\"],\n          rendererName: \"Heatmap\",\n          onRefresh: done\n        });\n      });\n      it(\"has all the basic UI elements\", function(done) {\n        expect(table.find(\"td.pvtAxisContainer\").length).toBe(3);\n        expect(table.find(\"td.pvtRendererArea\").length).toBe(1);\n        expect(table.find(\"td.pvtVals\").length).toBe(1);\n        expect(table.find(\"select.pvtRenderer\").length).toBe(1);\n        expect(table.find(\"select.pvtAggregator\").length).toBe(1);\n        expect(table.find(\"span.pvtAttr\").length).toBe(6);\n        return done();\n      });\n      it(\"reflects its inputs\", function(done) {\n        expect(table.find(\"td.pvtUnused span.pvtAttr\").length).toBe(4);\n        expect(table.find(\"td.pvtRows span.pvtAttr\").length).toBe(1);\n        expect(table.find(\"td.pvtCols span.pvtAttr\").length).toBe(1);\n        expect(table.find(\"select.pvtRenderer\").val()).toBe(\"Heatmap\");\n        expect(table.find(\"select.pvtAggregator\").val()).toBe(\"Sum over Sum\");\n        return done();\n      });\n      it(\"renders a table\", function(done) {\n        expect(table.find(\"table.pvtTable\").length).toBe(1);\n        return done();\n      });\n      return describe(\"its renderer output\", function() {\n        it(\"has the correct type and number of cells\", function(done) {\n          expect(table.find(\"th.pvtAxisLabel\").length).toBe(2);\n          expect(table.find(\"th.pvtRowLabel\").length).toBe(2);\n          expect(table.find(\"th.pvtColLabel\").length).toBe(3);\n          expect(table.find(\"th.pvtTotalLabel\").length).toBe(2);\n          expect(table.find(\"td.pvtVal\").length).toBe(6);\n          expect(table.find(\"td.pvtTotal\").length).toBe(5);\n          expect(table.find(\"td.pvtGrandTotal\").length).toBe(1);\n          return done();\n        });\n        it(\"has the correct textual representation\", function(done) {\n          expect(table.find(\"table.pvtTable\").text()).toBe([\"colour\", \"blue\", \"red\", \"yellow\", \"Totals\", \"gender\", \"female\", \"0.26\", \"0.14\", \"0.20\", \"male\", \"0.20\", \"0.20\", \"Totals\", \"0.20\", \"0.26\", \"0.14\", \"0.20\"].join(\"\"));\n          return done();\n        });\n        return it(\"has a correct spot-checked cell with data value\", function(done) {\n          expect(table.find(\"td.col0.row1\").text()).toBe(\"0.20\");\n          expect(table.find(\"td.col0.row1\").data(\"value\")).toBe((12 + 30) / (103 + 112));\n          return done();\n        });\n      });\n    });\n    return describe(\"with ragged input\", function() {\n      var table;\n      table = $(\"<div>\").pivotUI(raggedFixtureData, {\n        rows: [\"gender\"],\n        cols: [\"age\"]\n      });\n      return it(\"renders a table with the correct textual representation\", function() {\n        return expect(table.find(\"table.pvtTable\").text()).toBe([\"age\", \"12\", \"34\", \"null\", \"Totals\", \"gender\", \"female\", \"1\", \"1\", \"male\", \"1\", \"1\", \"null\", \"1\", \"1\", \"2\", \"Totals\", \"2\", \"1\", \"1\", \"4\"].join(\"\"));\n      });\n    });\n  });\n\n  describe(\"$.pivot()\", function() {\n    describe(\"with no rows/cols, default count aggregator, default TableRenderer\", function() {\n      var table;\n      table = $(\"<div>\").pivot(fixtureData);\n      it(\"renders a table\", function() {\n        return expect(table.find(\"table.pvtTable\").length).toBe(1);\n      });\n      return describe(\"its renderer output\", function() {\n        it(\"has the correct textual representation\", function() {\n          return expect(table.find(\"table.pvtTable\").text()).toBe([\"Totals\", \"4\"].join(\"\"));\n        });\n        return it(\"has a correct grand total with data value\", function() {\n          expect(table.find(\"td.pvtGrandTotal\").text()).toBe(\"4\");\n          return expect(table.find(\"td.pvtGrandTotal\").data(\"value\")).toBe(4);\n        });\n      });\n    });\n    describe(\"with rows/cols, sum aggregator, derivedAttributes, filter and sorters\", function() {\n      var aggregators, derivers, ref, sortAs, table;\n      ref = $.pivotUtilities, sortAs = ref.sortAs, derivers = ref.derivers, aggregators = ref.aggregators;\n      table = $(\"<div>\").pivot(fixtureData, {\n        rows: [\"gender\"],\n        cols: [\"birthyear\"],\n        aggregator: aggregators[\"Sum\"]([\"trialbins\"]),\n        filter: function(record) {\n          return record.name !== \"Nick\";\n        },\n        derivedAttributes: {\n          birthyear: derivers.dateFormat(\"birthday\", \"%y\"),\n          trialbins: derivers.bin(\"trials\", 10)\n        },\n        sorters: function(attr) {\n          if (attr === \"gender\") {\n            return sortAs([\"male\", \"female\"]);\n          }\n        }\n      });\n      return it(\"renders a table with the correct textual representation\", function() {\n        return expect(table.find(\"table.pvtTable\").text()).toBe([\"birthyear\", \"1982\", \"1983\", \"Totals\", \"gender\", \"male\", \"110.00\", \"110.00\", \"female\", \"90.00\", \"100.00\", \"190.00\", \"Totals\", \"200.00\", \"100.00\", \"300.00\"].join(\"\"));\n      });\n    });\n    describe(\"with rows/cols, fraction-of aggregator\", function() {\n      var aggregators, table;\n      aggregators = $.pivotUtilities.aggregators;\n      table = $(\"<div>\").pivot(fixtureData, {\n        rows: [\"gender\"],\n        aggregator: aggregators[\"Sum as Fraction of Total\"]([\"trials\"])\n      });\n      return it(\"renders a table with the correct textual representation\", function() {\n        return expect(table.find(\"table.pvtTable\").text()).toBe([\"gender\", \"Totals\", \"female\", \"47.8%\", \"male\", \"52.2%\", \"Totals\", \"100.0%\"].join(\"\"));\n      });\n    });\n    describe(\"with rows/cols, custom aggregator, custom renderer with options\", function() {\n      var received_PivotData, received_rendererOptions, table;\n      received_PivotData = null;\n      received_rendererOptions = null;\n      table = $(\"<div>\").pivot(fixtureData, {\n        rows: [\"name\", \"colour\"],\n        cols: [\"trials\", \"successes\"],\n        aggregator: function() {\n          return {\n            count2x: 0,\n            push: function() {\n              return this.count2x += 2;\n            },\n            value: function() {\n              return this.count2x;\n            },\n            format: function(x) {\n              return \"formatted \" + x;\n            }\n          };\n        },\n        renderer: function(a, b) {\n          received_PivotData = a;\n          received_rendererOptions = b;\n          return $(\"<div>\").addClass(b.greeting).text(\"world\");\n        },\n        rendererOptions: {\n          greeting: \"hithere\"\n        }\n      });\n      it(\"renders the custom renderer as per options\", function() {\n        return expect(table.find(\"div.hithere\").length).toBe(1);\n      });\n      return describe(\"its received PivotData object\", function() {\n        return it(\"has a correct grand total value and format for custom aggregator\", function() {\n          var agg, val;\n          agg = received_PivotData.getAggregator([], []);\n          val = agg.value();\n          expect(val).toBe(8);\n          return expect(agg.format(val)).toBe(\"formatted 8\");\n        });\n      });\n    });\n    return describe(\"with ragged input\", function() {\n      var table;\n      table = $(\"<div>\").pivot(raggedFixtureData, {\n        rows: [\"gender\"],\n        cols: [\"age\"]\n      });\n      return it(\"renders a table with the correct textual representation\", function() {\n        return expect(table.find(\"table.pvtTable\").text()).toBe([\"age\", \"12\", \"34\", \"null\", \"Totals\", \"gender\", \"female\", \"1\", \"1\", \"male\", \"1\", \"1\", \"null\", \"1\", \"1\", \"2\", \"Totals\", \"2\", \"1\", \"1\", \"4\"].join(\"\"));\n      });\n    });\n  });\n\n  describe(\"$.pivotUtilities\", function() {\n    describe(\".PivotData()\", function() {\n      var sumOverSumOpts;\n      sumOverSumOpts = {\n        aggregator: $.pivotUtilities.aggregators[\"Sum over Sum\"]([\"a\", \"b\"])\n      };\n      describe(\"with no options\", function() {\n        var aoaInput, pd;\n        aoaInput = [[\"a\", \"b\"], [1, 2], [3, 4]];\n        pd = new $.pivotUtilities.PivotData(aoaInput);\n        return it(\"has the correct grand total value\", function() {\n          return expect(pd.getAggregator([], []).value()).toBe(2);\n        });\n      });\n      describe(\"with array-of-array input\", function() {\n        var aoaInput, pd;\n        aoaInput = [[\"a\", \"b\"], [1, 2], [3, 4]];\n        pd = new $.pivotUtilities.PivotData(aoaInput, sumOverSumOpts);\n        return it(\"has the correct grand total value\", function() {\n          return expect(pd.getAggregator([], []).value()).toBe((1 + 3) / (2 + 4));\n        });\n      });\n      describe(\"with array-of-object input\", function() {\n        var aosInput, pd;\n        aosInput = [\n          {\n            a: 1,\n            b: 2\n          }, {\n            a: 3,\n            b: 4\n          }\n        ];\n        pd = new $.pivotUtilities.PivotData(aosInput, sumOverSumOpts);\n        return it(\"has the correct grand total value\", function() {\n          return expect(pd.getAggregator([], []).value()).toBe((1 + 3) / (2 + 4));\n        });\n      });\n      describe(\"with ragged array-of-object input\", function() {\n        var pd, raggedAosInput;\n        raggedAosInput = [\n          {\n            a: 1\n          }, {\n            b: 4\n          }, {\n            a: 3,\n            b: 2\n          }\n        ];\n        pd = new $.pivotUtilities.PivotData(raggedAosInput, sumOverSumOpts);\n        return it(\"has the correct grand total value\", function() {\n          return expect(pd.getAggregator([], []).value()).toBe((1 + 3) / (2 + 4));\n        });\n      });\n      describe(\"with function input\", function() {\n        var functionInput, pd;\n        functionInput = function(record) {\n          record({\n            a: 1,\n            b: 2\n          });\n          return record({\n            a: 3,\n            b: 4\n          });\n        };\n        pd = new $.pivotUtilities.PivotData(functionInput, sumOverSumOpts);\n        return it(\"has the correct grand total value\", function() {\n          return expect(pd.getAggregator([], []).value()).toBe((1 + 3) / (2 + 4));\n        });\n      });\n      describe(\"with jQuery table element input\", function() {\n        var pd, tableInput;\n        tableInput = $(\"<table>\\n    <thead>\\n        <tr> <th>a</th><th>b</th> </tr>\\n    </thead>\\n    <tbody>\\n        <tr> <td>1</td> <td>2</td> </tr>\\n        <tr> <td>3</td> <td>4</td> </tr>\\n    </tbody>\\n</table>\");\n        pd = new $.pivotUtilities.PivotData(tableInput, sumOverSumOpts);\n        return it(\"has the correct grand total value\", function() {\n          return expect(pd.getAggregator([], []).value()).toBe((1 + 3) / (2 + 4));\n        });\n      });\n      return describe(\"with rows/cols\", function() {\n        var pd;\n        pd = new $.pivotUtilities.PivotData(fixtureData, {\n          rows: [\"name\", \"colour\"],\n          cols: [\"trials\", \"successes\"]\n        });\n        it(\"has correctly-ordered row keys\", function() {\n          return expect(pd.getRowKeys()).toEqual([['Carol', 'yellow'], ['Jane', 'red'], ['John', 'blue'], ['Nick', 'blue']]);\n        });\n        it(\"has correctly-ordered col keys\", function() {\n          return expect(pd.getColKeys()).toEqual([[95, 25], [102, 14], [103, 12], [112, 30]]);\n        });\n        it(\"can be iterated over\", function() {\n          var c, i, j, len, len1, numNotNull, numNull, r, ref, ref1;\n          numNotNull = 0;\n          numNull = 0;\n          ref = pd.getRowKeys();\n          for (i = 0, len = ref.length; i < len; i++) {\n            r = ref[i];\n            ref1 = pd.getColKeys();\n            for (j = 0, len1 = ref1.length; j < len1; j++) {\n              c = ref1[j];\n              if (pd.getAggregator(r, c).value() != null) {\n                numNotNull++;\n              } else {\n                numNull++;\n              }\n            }\n          }\n          expect(numNotNull).toBe(4);\n          return expect(numNull).toBe(12);\n        });\n        it(\"returns matching records\", function() {\n          var records;\n          records = [];\n          pd.forEachMatchingRecord({\n            gender: \"male\"\n          }, function(x) {\n            return records.push(x.name);\n          });\n          return expect(records).toEqual([\"Nick\", \"John\"]);\n        });\n        it(\"has a correct spot-checked aggregator\", function() {\n          var agg, val;\n          agg = pd.getAggregator(['Carol', 'yellow'], [102, 14]);\n          val = agg.value();\n          expect(val).toBe(1);\n          return expect(agg.format(val)).toBe(\"1\");\n        });\n        return it(\"has a correct grand total aggregator\", function() {\n          var agg, val;\n          agg = pd.getAggregator([], []);\n          val = agg.value();\n          expect(val).toBe(4);\n          return expect(agg.format(val)).toBe(\"4\");\n        });\n      });\n    });\n    describe(\".naturalSort()\", function() {\n      var naturalSort;\n      naturalSort = $.pivotUtilities.naturalSort;\n      it(\"sorts numbers\", function() {\n        return expect([2, 1, 3, 4, 0].sort(naturalSort)).toEqual([0, 1, 2, 3, 4]);\n      });\n      it(\"sorts strings case-sensitively\", function() {\n        return expect(['b', 'a', 'c', 'd', 'A', 'a', 'A'].sort(naturalSort)).toEqual(['A', 'A', 'a', 'a', 'b', 'c', 'd']);\n      });\n      it(\"sorts numbers in strings\", function() {\n        return expect(['1', '12', '2', '10', '11', '112'].sort(naturalSort)).toEqual(['1', '2', '10', '11', '12', '112']);\n      });\n      return it(\"sorts 0-padded numbers\", function() {\n        return expect(['02', '01', '10', '11'].sort(naturalSort)).toEqual(['01', '02', '10', '11']);\n      });\n    });\n    describe(\".sortAs()\", function() {\n      var sortAs;\n      sortAs = $.pivotUtilities.sortAs;\n      it(\"sorts with unknown values sorted at the end\", function() {\n        return expect([5, 2, 3, 4, 1].sort(sortAs([4, 3, 2]))).toEqual([4, 3, 2, 1, 5]);\n      });\n      return it(\"sorts lowercase after uppercase\", function() {\n        return expect([\"Ab\", \"aA\", \"aa\", \"ab\"].sort(sortAs([\"Ab\", \"Aa\"]))).toEqual([\"Ab\", \"ab\", \"aa\", \"aA\"]);\n      });\n    });\n    describe(\".numberFormat()\", function() {\n      var numberFormat;\n      numberFormat = $.pivotUtilities.numberFormat;\n      it(\"formats numbers\", function() {\n        var nf;\n        nf = numberFormat();\n        return expect(nf(1234567.89123456)).toEqual(\"1,234,567.89\");\n      });\n      it(\"formats booleans\", function() {\n        var nf;\n        nf = numberFormat();\n        return expect(nf(true)).toEqual(\"1.00\");\n      });\n      it(\"formats numbers in strings\", function() {\n        var nf;\n        nf = numberFormat();\n        return expect(nf(\"1234567.89123456\")).toEqual(\"1,234,567.89\");\n      });\n      it(\"doesn't formats strings\", function() {\n        var nf;\n        nf = numberFormat();\n        return expect(nf(\"hi there\")).toEqual(\"\");\n      });\n      it(\"doesn't formats objects\", function() {\n        var nf;\n        nf = numberFormat();\n        return expect(nf({\n          a: 1\n        })).toEqual(\"\");\n      });\n      it(\"formats percentages\", function() {\n        var nf;\n        nf = numberFormat({\n          scaler: 100,\n          suffix: \"%\"\n        });\n        return expect(nf(0.12345)).toEqual(\"12.35%\");\n      });\n      it(\"adds separators\", function() {\n        var nf;\n        nf = numberFormat({\n          thousandsSep: \"a\",\n          decimalSep: \"b\"\n        });\n        return expect(nf(1234567.89123456)).toEqual(\"1a234a567b89\");\n      });\n      it(\"adds prefixes and suffixes\", function() {\n        var nf;\n        nf = numberFormat({\n          prefix: \"a\",\n          suffix: \"b\"\n        });\n        return expect(nf(1234567.89123456)).toEqual(\"a1,234,567.89b\");\n      });\n      it(\"scales and rounds\", function() {\n        var nf;\n        nf = numberFormat({\n          digitsAfterDecimal: 3,\n          scaler: 1000\n        });\n        return expect(nf(1234567.89123456)).toEqual(\"1,234,567,891.235\");\n      });\n      return it(\"shows and hides zero\", function() {\n        var nf;\n        nf = numberFormat({\n          showZero: true\n        });\n        expect(nf(0)).toEqual(\"0.00\");\n        nf = numberFormat({\n          showZero: false\n        });\n        return expect(nf(0)).toEqual(\"\");\n      });\n    });\n    return describe(\".derivers\", function() {\n      describe(\".dateFormat()\", function() {\n        var df;\n        df = $.pivotUtilities.derivers.dateFormat(\"x\", \"abc % %% %%% %a %y %m %n %d %w %x %H %M %S\", true);\n        it(\"formats date objects\", function() {\n          return expect(df({\n            x: new Date(\"2015-01-02T23:43:11Z\")\n          })).toBe('abc % %% %%% %a 2015 01 Jan 02 Fri 5 23 43 11');\n        });\n        return it(\"formats input parsed by Date.parse()\", function() {\n          expect(df({\n            x: \"2015-01-02T23:43:11Z\"\n          })).toBe('abc % %% %%% %a 2015 01 Jan 02 Fri 5 23 43 11');\n          return expect(df({\n            x: \"bla\"\n          })).toBe('');\n        });\n      });\n      return describe(\".bin()\", function() {\n        var binner;\n        binner = $.pivotUtilities.derivers.bin(\"x\", 10);\n        it(\"bins numbers\", function() {\n          expect(binner({\n            x: 11\n          })).toBe(10);\n          expect(binner({\n            x: 9\n          })).toBe(0);\n          return expect(binner({\n            x: 111\n          })).toBe(110);\n        });\n        it(\"bins booleans\", function() {\n          return expect(binner({\n            x: true\n          })).toBe(0);\n        });\n        it(\"bins negative numbers\", function() {\n          return expect(binner({\n            x: -12\n          })).toBe(-10);\n        });\n        it(\"doesn't bin strings\", function() {\n          return expect(binner({\n            x: \"a\"\n          })).toBeNaN();\n        });\n        return it(\"doesn't bin objects\", function() {\n          return expect(binner({\n            x: {\n              a: 1\n            }\n          })).toBeNaN();\n        });\n      });\n    });\n  });\n\n}).call(this);\n\n//# sourceMappingURL=pivot_spec.js.map\n"]}